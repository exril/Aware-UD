[
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "isqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "DiscordUtils",
        "importPath": "chat_exporter.ext.discord_utils",
        "description": "chat_exporter.ext.discord_utils",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_utils",
        "documentation": {}
    },
    {
        "label": "DiscordUtils",
        "importPath": "chat_exporter.ext.discord_utils",
        "description": "chat_exporter.ext.discord_utils",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_utils",
        "documentation": {}
    },
    {
        "label": "DiscordUtils",
        "importPath": "chat_exporter.ext.discord_utils",
        "description": "chat_exporter.ext.discord_utils",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_utils",
        "documentation": {}
    },
    {
        "label": "DiscordUtils",
        "importPath": "chat_exporter.ext.discord_utils",
        "description": "chat_exporter.ext.discord_utils",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_utils",
        "documentation": {}
    },
    {
        "label": "fill_out",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "img_attachment",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "msg_attachment",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "audio_attachment",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "video_attachment",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fill_out",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_button",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_menu",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_menu_options",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_menu_options_emoji",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_EMOJI",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_MARKDOWN",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fill_out",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_body",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_title",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_description",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_field",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_field_inline",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_footer",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_footer_icon",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_image",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_thumbnail",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_author",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_author_icon",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_EMBED",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_MARKDOWN",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_SPECIAL_EMBED",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fill_out",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "emoji",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "custom_emoji",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fill_out",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "bot_tag",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "bot_tag_verified",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_body",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_pin",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_thread",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_content",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_reference",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_reference_unknown",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_interaction",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "img_attachment",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "start_message",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "end_message",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_MARKDOWN",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_REFERENCE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fill_out",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "total",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "channel_topic",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "meta_data_temp",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fancy_time",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "channel_subject",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "discord",
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "discord",
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "discord",
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "discord",
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "discord",
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "discord",
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "I",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "I",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "I",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "convert_emoji",
        "importPath": "chat_exporter.ext.emoji_convert",
        "description": "chat_exporter.ext.emoji_convert",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.emoji_convert",
        "documentation": {}
    },
    {
        "label": "convert_emoji",
        "importPath": "chat_exporter.ext.emoji_convert",
        "description": "chat_exporter.ext.emoji_convert",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.emoji_convert",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Attachment",
        "importPath": "chat_exporter.construct.assets",
        "description": "chat_exporter.construct.assets",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.assets",
        "documentation": {}
    },
    {
        "label": "Component",
        "importPath": "chat_exporter.construct.assets",
        "description": "chat_exporter.construct.assets",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.assets",
        "documentation": {}
    },
    {
        "label": "Embed",
        "importPath": "chat_exporter.construct.assets",
        "description": "chat_exporter.construct.assets",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.assets",
        "documentation": {}
    },
    {
        "label": "Reaction",
        "importPath": "chat_exporter.construct.assets",
        "description": "chat_exporter.construct.assets",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.assets",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "gather_messages",
        "importPath": "chat_exporter.construct.message",
        "description": "chat_exporter.construct.message",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.message",
        "documentation": {}
    },
    {
        "label": "Component",
        "importPath": "chat_exporter.construct.assets.component",
        "description": "chat_exporter.construct.assets.component",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.assets.component",
        "documentation": {}
    },
    {
        "label": "clear_cache",
        "importPath": "chat_exporter.ext.cache",
        "description": "chat_exporter.ext.cache",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "chat_exporter.ext.cache",
        "description": "chat_exporter.ext.cache",
        "isExtraImport": true,
        "detail": "chat_exporter.ext.cache",
        "documentation": {}
    },
    {
        "label": "pass_bot",
        "importPath": "chat_exporter.parse.mention",
        "description": "chat_exporter.parse.mention",
        "isExtraImport": true,
        "detail": "chat_exporter.parse.mention",
        "documentation": {}
    },
    {
        "label": "ParseMention",
        "importPath": "chat_exporter.parse.mention",
        "description": "chat_exporter.parse.mention",
        "isExtraImport": true,
        "detail": "chat_exporter.parse.mention",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "graphemes",
        "importPath": "grapheme",
        "description": "grapheme",
        "isExtraImport": true,
        "detail": "grapheme",
        "documentation": {}
    },
    {
        "label": "emoji",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emoji",
        "description": "emoji",
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ParseMarkdown",
        "importPath": "chat_exporter.parse.markdown",
        "description": "chat_exporter.parse.markdown",
        "isExtraImport": true,
        "detail": "chat_exporter.parse.markdown",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Transcript",
        "importPath": "chat_exporter.construct.transcript",
        "description": "chat_exporter.construct.transcript",
        "isExtraImport": true,
        "detail": "chat_exporter.construct.transcript",
        "documentation": {}
    },
    {
        "label": "discord,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord.",
        "description": "discord.",
        "detail": "discord.",
        "documentation": {}
    },
    {
        "label": "button_paginator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "button_paginator",
        "description": "button_paginator",
        "detail": "button_paginator",
        "documentation": {}
    },
    {
        "label": "yarl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yarl",
        "description": "yarl",
        "detail": "yarl",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "ui",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "TextChannel",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "ChannelType",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Embed",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Member",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "SelectOption",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "PartialEmoji",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "PermissionOverwrite",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "app_commands",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Webhook",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Webhook",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Webhook",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Webhook",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Webhook",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "check_upgraded",
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "isExtraImport": true,
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "paginators",
        "description": "paginators",
        "isExtraImport": true,
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "noperms",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "sendmsg",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "noperms",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "blacklist",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "sendmsg",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "noperms",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "sendmsg",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "noperms",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "sendmsg",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "noperms",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "blacklist",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "sendmsg",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "commandhelp",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "noperms",
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "isExtraImport": true,
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "importPath": "utils.classes",
        "description": "utils.classes",
        "isExtraImport": true,
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "aiosqlite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiosqlite",
        "description": "aiosqlite",
        "detail": "aiosqlite",
        "documentation": {}
    },
    {
        "label": "Figlet",
        "importPath": "pyfiglet",
        "description": "pyfiglet",
        "isExtraImport": true,
        "detail": "pyfiglet",
        "documentation": {}
    },
    {
        "label": "Figlet",
        "importPath": "pyfiglet",
        "description": "pyfiglet",
        "isExtraImport": true,
        "detail": "pyfiglet",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "discord.ui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord.ui",
        "description": "discord.ui",
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Modal",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Cog",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "group",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "hybrid_command",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "hybrid_group",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "command",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "AutoShardedBot",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "has_permissions",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "Perms",
        "importPath": "aware.checks",
        "description": "aware.checks",
        "isExtraImport": true,
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "Boosts",
        "importPath": "aware.checks",
        "description": "aware.checks",
        "isExtraImport": true,
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "EmbedBuilder",
        "importPath": "aware.utils",
        "description": "aware.utils",
        "isExtraImport": true,
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "InvokeClass",
        "importPath": "aware.utils",
        "description": "aware.utils",
        "isExtraImport": true,
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "EmbedScript",
        "importPath": "aware.utils",
        "description": "aware.utils",
        "isExtraImport": true,
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "aware.utils",
        "description": "aware.utils",
        "isExtraImport": true,
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "asyncpg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncpg",
        "description": "asyncpg",
        "detail": "asyncpg",
        "documentation": {}
    },
    {
        "label": "jishaku",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jishaku",
        "description": "jishaku",
        "detail": "jishaku",
        "documentation": {}
    },
    {
        "label": "CaseInsensitiveDict",
        "importPath": "requests.structures",
        "description": "requests.structures",
        "isExtraImport": true,
        "detail": "requests.structures",
        "documentation": {}
    },
    {
        "label": "botinfo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "botinfo",
        "description": "botinfo",
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "botinfo",
        "description": "botinfo",
        "isExtraImport": true,
        "detail": "botinfo",
        "documentation": {}
    },
    {
        "label": "ticketpanel",
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "isExtraImport": true,
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "tickredel",
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "isExtraImport": true,
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "ticketchannelpanel",
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "isExtraImport": true,
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "DropdownSelfRoleView",
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "isExtraImport": true,
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "ButtonSelfRoleView",
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "isExtraImport": true,
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "parseString",
        "importPath": "xml.dom.pulldom",
        "description": "xml.dom.pulldom",
        "isExtraImport": true,
        "detail": "xml.dom.pulldom",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "discord;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord;",
        "description": "discord;",
        "detail": "discord;",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageOps",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "datetime,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime.",
        "description": "datetime.",
        "detail": "datetime.",
        "documentation": {}
    },
    {
        "label": "aiosqlite,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiosqlite.",
        "description": "aiosqlite.",
        "detail": "aiosqlite.",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "importPath": "utils.paginator",
        "description": "utils.paginator",
        "isExtraImport": true,
        "detail": "utils.paginator",
        "documentation": {}
    },
    {
        "label": "aware",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "praser",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "aware",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "e",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "e",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "iglob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "iglob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "to_object",
        "importPath": "utils.embedparser",
        "description": "utils.embedparser",
        "isExtraImport": true,
        "detail": "utils.embedparser",
        "documentation": {}
    },
    {
        "label": "serpapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serpapi",
        "description": "serpapi",
        "detail": "serpapi",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "embed",
        "description": "embed",
        "isExtraImport": true,
        "detail": "embed",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "embed",
        "description": "embed",
        "isExtraImport": true,
        "detail": "embed",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "embed",
        "description": "embed",
        "isExtraImport": true,
        "detail": "embed",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "wavelink",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wavelink",
        "description": "wavelink",
        "detail": "wavelink",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "tabnanny",
        "description": "tabnanny",
        "isExtraImport": true,
        "detail": "tabnanny",
        "documentation": {}
    },
    {
        "label": "TemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.converter",
        "description": "utils.converter",
        "isExtraImport": true,
        "detail": "utils.converter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.converter",
        "description": "utils.converter",
        "isExtraImport": true,
        "detail": "utils.converter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.converter",
        "description": "utils.converter",
        "isExtraImport": true,
        "detail": "utils.converter",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "checktag",
        "importPath": "cogs.donor",
        "description": "cogs.donor",
        "isExtraImport": true,
        "detail": "cogs.donor",
        "documentation": {}
    },
    {
        "label": "PFPS",
        "importPath": "images.pfps",
        "description": "images.pfps",
        "isExtraImport": true,
        "detail": "images.pfps",
        "documentation": {}
    },
    {
        "label": "spotify",
        "importPath": "wavelink.ext",
        "description": "wavelink.ext",
        "isExtraImport": true,
        "detail": "wavelink.ext",
        "documentation": {}
    },
    {
        "label": "spotify",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spotify",
        "description": "spotify",
        "detail": "spotify",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cogs",
        "importPath": "basic_help",
        "description": "basic_help",
        "isExtraImport": true,
        "detail": "basic_help",
        "documentation": {}
    },
    {
        "label": "topgg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "topgg",
        "description": "topgg",
        "detail": "topgg",
        "documentation": {}
    },
    {
        "label": "spotipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spotipy",
        "description": "spotipy",
        "detail": "spotipy",
        "documentation": {}
    },
    {
        "label": "SpotifyClientCredentials",
        "importPath": "spotipy.oauth2",
        "description": "spotipy.oauth2",
        "isExtraImport": true,
        "detail": "spotipy.oauth2",
        "documentation": {}
    },
    {
        "label": "spotipy.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spotipy.util",
        "description": "spotipy.util",
        "detail": "spotipy.util",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Boosts",
        "kind": 6,
        "importPath": "aware.checks",
        "description": "aware.checks",
        "peekOfCode": "class Boosts: \n  def get_level(boosts: int): \n   async def predicate(ctx: commands.Context): \n    if ctx.guild.premium_subscription_count < boosts: await ctx.send_warning( f\"This server needs to have more than **{boosts}** boosts in order to use this command\") \n    return ctx.guild.premium_subscription_count >= boosts \n   return commands.check(predicate)\nclass Joint: \n  def check_joint():\n   async def predicate(ctx: commands.Context): \n    check = await ctx.bot.db.fetchrow(\"SELECT * FROM joint WHERE guild_id = $1\", ctx.guild.id)",
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "Joint",
        "kind": 6,
        "importPath": "aware.checks",
        "description": "aware.checks",
        "peekOfCode": "class Joint: \n  def check_joint():\n   async def predicate(ctx: commands.Context): \n    check = await ctx.bot.db.fetchrow(\"SELECT * FROM joint WHERE guild_id = $1\", ctx.guild.id)\n    if not check: await ctx.bot.ext.send_error(ctx, f\"This server **doesn't** have a **joint**. Use `{ctx.clean_prefix}joint toggle` to get one\")    \n    return check is not None    \n   return commands.check(predicate)\n  def joint_owner(): \n   async def predicate(ctx: commands.Context): \n    check = await ctx.bot.db.fetchrow(\"SELECT * FROM joint WHERE guild_id = $1\", ctx.guild.id)",
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "Mod",
        "kind": 6,
        "importPath": "aware.checks",
        "description": "aware.checks",
        "peekOfCode": "class Mod: \n  def is_mod_configured(): \n   async def predicate(ctx: commands.Context): \n    check = await ctx.bot.db.fetchrow(\"SELECT * FROM mod WHERE guild_id = $1\", ctx.guild.id)\n    if not check: \n     await ctx.send_warning( f\"Moderation isn't **enabled** in this server. Enable it using `{ctx.clean_prefix}setmod` command\")\n     return False\n    return True\n   return commands.check(predicate)\n  async def check_role_position(ctx: commands.Context, role: discord.Role) -> bool: ",
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "Messages",
        "kind": 6,
        "importPath": "aware.checks",
        "description": "aware.checks",
        "peekOfCode": "class Messages: \n  def good_message(message: discord.Message) -> bool: \n   if not message.guild or message.author.bot or message.content == \"\": return False \n   return True\nclass Owners: \n  def check_owners(): \n   async def predicate(ctx: commands.Context): \n    return ctx.author.id in owners\n   return commands.check(predicate)   \nclass Perms: ",
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "Owners",
        "kind": 6,
        "importPath": "aware.checks",
        "description": "aware.checks",
        "peekOfCode": "class Owners: \n  def check_owners(): \n   async def predicate(ctx: commands.Context): \n    return ctx.author.id in owners\n   return commands.check(predicate)   \nclass Perms: \n  def server_owner(): \n   async def predicate(ctx: commands.Context): \n    if ctx.author.id != ctx.guild.owner_id: \n      await ctx.send_warning( f\"This command can be used only by **{ctx.guild.owner}**\") ",
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "Perms",
        "kind": 6,
        "importPath": "aware.checks",
        "description": "aware.checks",
        "peekOfCode": "class Perms: \n  def server_owner(): \n   async def predicate(ctx: commands.Context): \n    if ctx.author.id != ctx.guild.owner_id: \n      await ctx.send_warning( f\"This command can be used only by **{ctx.guild.owner}**\") \n      return False \n    return True   \n   return commands.check(predicate)   \n  def check_whitelist(module: str):\n   async def predicate(ctx: commands.Context):",
        "detail": "aware.checks",
        "documentation": {}
    },
    {
        "label": "InvokeClass",
        "kind": 6,
        "importPath": "aware.utils",
        "description": "aware.utils",
        "peekOfCode": "class InvokeClass:\n async def invoke_send(ctx: commands.Context, member: Union[discord.User, discord.Member], reason: str): \n  res = await ctx.bot.db.fetchrow(\"SELECT embed FROM invoke WHERE guild_id = $1 AND command = $2\", ctx.guild.id, ctx.command.name)\n  if res: \n     code = res['embed']\n     try: \n      x = await EmbedBuilder.to_object(EmbedBuilder.embed_replacement(member, InvokeClass.invoke_replacement(member, code.replace(\"{reason}\", reason))))\n      await ctx.reply(content=x[0], embed=x[1], view=x[2])\n     except: await ctx.reply(EmbedBuilder.embed_replacement(member, InvokeClass.invoke_replacement(member, code.replace(\"{reason}\", reason)))) \n     return True ",
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "EmbedBuilder",
        "kind": 6,
        "importPath": "aware.utils",
        "description": "aware.utils",
        "peekOfCode": "class EmbedBuilder:\n def ordinal(self, num: int) -> str:\n   \"\"\"Convert from number to ordinal (10 - 10th)\"\"\" \n   numb = str(num) \n   if numb.startswith(\"0\"): numb = numb.strip('0')\n   if numb in [\"11\", \"12\", \"13\"]: return numb + \"th\"\n   if numb.endswith(\"1\"): return numb + \"st\"\n   elif numb.endswith(\"2\"):  return numb + \"nd\"\n   elif numb.endswith(\"3\"): return numb + \"rd\"\n   else: return numb + \"th\"    ",
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "EmbedScript",
        "kind": 6,
        "importPath": "aware.utils",
        "description": "aware.utils",
        "peekOfCode": "class EmbedScript(commands.Converter): \n  async def convert(self, ctx: commands.Context, argument: str):\n   x = await EmbedBuilder.to_object(EmbedBuilder.embed_replacement(ctx.author, argument))\n   if x[0] or x[1]: return {\"content\": x[0], \"embed\": x[1], \"view\": x[2]} \n   return {\"content\": EmbedBuilder.embed_replacement(ctx.author, argument)}\nclass GoToModal(discord.ui.Modal, title=\"change the page\"):\n  page = discord.ui.TextInput(label=\"page\", placeholder=\"change the page\", max_length=3)\n  async def on_submit(self, interaction: discord.Interaction) -> None:\n   if int(self.page.value) > len(self.embeds): return await interaction.client.ext.send_warning(interaction, f\"You can only select a page **between** 1 and {len(self.embeds)}\", ephemeral=True) \n   await interaction.response.edit_message(embed=self.embeds[int(self.page.value)-1]) ",
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "GoToModal",
        "kind": 6,
        "importPath": "aware.utils",
        "description": "aware.utils",
        "peekOfCode": "class GoToModal(discord.ui.Modal, title=\"change the page\"):\n  page = discord.ui.TextInput(label=\"page\", placeholder=\"change the page\", max_length=3)\n  async def on_submit(self, interaction: discord.Interaction) -> None:\n   if int(self.page.value) > len(self.embeds): return await interaction.client.ext.send_warning(interaction, f\"You can only select a page **between** 1 and {len(self.embeds)}\", ephemeral=True) \n   await interaction.response.edit_message(embed=self.embeds[int(self.page.value)-1]) \n  async def on_error(self, interaction: discord.Interaction, error: Exception) -> None: \n    await interaction.client.ext.send_warning(interaction, \"Unable to change the page\", ephemeral=True)\nclass PaginatorView(discord.ui.View): \n    def __init__(self, ctx: commands.Context, embeds: list): \n      super().__init__()  ",
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "kind": 6,
        "importPath": "aware.utils",
        "description": "aware.utils",
        "peekOfCode": "class PaginatorView(discord.ui.View): \n    def __init__(self, ctx: commands.Context, embeds: list): \n      super().__init__()  \n      self.embeds = embeds\n      self.ctx = ctx\n      self.i = 0\n    @discord.ui.button(emoji=\"◀️\", style=discord.ButtonStyle.blurple)\n    async def left(self, interaction: discord.Interaction, button: discord.ui.Button): \n      if interaction.user.id != self.ctx.author.id: return await interaction.client.ext.send(interaction, \"You are not the author of this embed\")          \n      if self.i == 0: ",
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "Pack",
        "kind": 6,
        "importPath": "aware.utils",
        "description": "aware.utils",
        "peekOfCode": "class Pack: \n  scripts = [\"This nigga ugly as shit you fat ass boy you been getting flamed by two donkeys when you walk to the store and one of them smacked you in the forehead fuckboy and then you go to come in with uh ???? and smacked you in the bootycheeks fuckboy you dirty as shit boy everytime you go to school nigga you get bullied by 10 white kids that say you gay behind the bus fuckboy suck my dick nigga unknown as shit nigga named nud you been getting hit by two frozen packs when you walk into the store fuckboy suck my dick unknown ass nigga named nud nigga you my son nigga hold on, ay creedo you can flame this nigga for me? Yeah im in this bitch fuck is you saying nigga my nigga.\",\n             \"Whether you wipe that shit or eat that shit pussy ass nigga , I'll slap you with a massaacho ٴًٰٰdancing leprechaun in your bum-hole like HotWheels driving in your ass nigga and coming out like angry birds when I fucked your mom so hard that she be getting a dead line for bad communication in a iphone 64 produced by a buzz cut in India. nigga what you talkin about , nigga you sound like you boutta order Big macs for my whole family and got sidefucked by john cena in a karate tournament . Bitch ass nigga whenever you talk ,you sound like a crowd of chinese dhar man people debating about 'Is god real? ' Like shut yo bitch ass nigga you got a bible to read out loud like you gonna get whip in the ass when you ordered a ice cream from pornhub dumb ass nigga , remember when you clogged the kid's mouth in the class playing ' I dare you to shit in my mouth for one thousand V bucks' gay ass nigga , whenever you sleep you got yourself into a situation where white kids throwing gang signs in their deathbed you pussy ass nigga kiss heads Abc optimus prime tv looking ass nigga you lame ass shit that's why you get no pussy from valentines dumb ass nigga wanna be rich boy small boy faggot card magic school bus in your mum pussy ass nigga\",\n             \" kno ass aint talkin boy you look like a discombobulated toe nail nigga whenever you take a bath your jerk off then the next you smell like ass nasty nigga fuck is you saying nigga you got smacked with a gold fish in the grocery store and smacked the gold fish with fish food nasty bitch boy you ugly as shit fuck is you saying FAT BOY ugly bitch my nigga i caught yo ass slap boxing yo granny with an apple fuck is you saying my nigga when you get horny you jerk off to donkeys fuck is you saying ugly bitch\",\n             \"Aight bruh shut ur dumbass up before i get to the packing on ur ass u nasty no neck built ass happy meal looking ass bvoy shut ur big booty ass up i caught ur dumbass cosplaying as ronald mcdonald till u got body slammed by a chicken nugget u nasty as boy after that u fell into a coma when u wake up u thought u was from lego ninja go u started saying ninja gooo u started smacking people on the streets with racoons till ur fatass got hungry u started eating them u said yea u got the yummy yuh yummy yuh ma yummy yuh u nasty ass boy cum in a bum cum in a son nasty ass bitch u bout dirty as shit boy i caught ur fatass in ur backyard belly dancing with cockroaches till u started dong the dream speedrun anthem they started speedrunning trying to kill the enderdragon u said minecraft was the best game in 2022 u enchanted ur body parts with efficiency 5 u became the fastest person on earth u started going on a big mac rampage eating every big mac u see fat neck built ass bitch u became depressed cus u got rejected 19 times in a row u got a charger and charged it into ur heart thinking it will fix ur depression like shit boy u thought u was michael jordan u started slamming basketballs into ur grandmas pussy u dirty ass bitch\",\n             \"shut yo ugly dumb ass up nigga thats why your grandma got caught throwing up gang signs because she thought it was sign language and got shot 19 times in the back ugly neck ass boy thats why your dad shoves cartons of milk up his ass infront of the chuck e cheese while screaming the lyrics to gummibar bozo ass nigga yo mom blackmails miley cirus while shoving turkey in her mouth like she is eating dick stupid ass nigga\",\n             \"Ugly ass shit yo weak Hang your self with a noose fatass cow go run it through ur emo fruit ninja wrists my guy. You ugly tell your grandma mighty fine i might hit her from behind and make her whine bitch ass hush mode. Theres a stutter thats why u aint got no mother tell me why you got one foot longer then the other you dumbass mf mf retarded ass fag your 10 stfu im not a hoe you little ass slut. now dont be disrespectful whore.your mom violated your shit by nameing you (whatever their name is) and i did too. ill get down with you fagShut your lil stoopid ass talking abt my father left but ik ur not talking like ur father didnt get hit in his megamind forehead by a 40 guacamole rocket launcher by bro hold shit roman ranges finna slap u that why nobody likes u. \",\n             \"now im bout to get the packing on yo stuff boi u look like a zestful squirrel monkey black ah boi u look like you chew on diceratop ankles bitch ah boi yo momma built like an overweight camel fat ah momma i bet she chew on obnoxious tampons with her fat ah and i caught yo grandpa chewing on corkscrews dumb ah boi tell me why i caught yo ass chewing on coordinated tin can with yo fat ah boi u look like a rambunctious sea slime with yo stupid ah\",\n             \"fucking autistic round head ass looking like a stickman, your profession is being a fucking donkey you fucking hipster, you look like a crackhead, when you turn to your side you dissapear like a magician you fucking scrawny little toe sucking cow shit mauling hunchback looking retard, i hope you get attacked by 67 rapid pitbulls while you walk home from school next week you fucking bitch ass camel, your sense of humor is worser than Drew Ackerman's, boring ass emo kid, your hairy is more greasy and tangly than a fucking street cat you rabbit ass cowboy looking motherfucker\",\n             \"shut yo wiggly diggly spliggy fliggly diggity ass up my nigga you rented a u-haul truck just to drive to Jamaica and order a whopper from mcdonalds and then your life went to shit because you got ran over be a semi truck fucked three times in the ass hole by the tellitubies dumb ass boi you thought you could eat fucking gasoline and get high fat ass magic mushroom looking ass boi fuck up bro i shoved monster energy in your ass hole and you dark a whole bottle of laxatives' to get that shit out fat ass nigga\",",
        "detail": "aware.utils",
        "documentation": {}
    },
    {
        "label": "Attachment",
        "kind": 6,
        "importPath": "chat_exporter.construct.assets.attachment",
        "description": "chat_exporter.construct.assets.attachment",
        "peekOfCode": "class Attachment:\n    def __init__(self, attachments, guild):\n        self.attachments = attachments\n        self.guild = guild\n    async def flow(self):\n        await self.build_attachment()\n        return self.attachments\n    async def build_attachment(self):\n        if self.attachments.content_type is not None:\n            if \"image\" in self.attachments.content_type:",
        "detail": "chat_exporter.construct.assets.attachment",
        "documentation": {}
    },
    {
        "label": "Component",
        "kind": 6,
        "importPath": "chat_exporter.construct.assets.component",
        "description": "chat_exporter.construct.assets.component",
        "peekOfCode": "class Component:\n    styles = {\n        \"primary\": \"#5865F2\",\n        \"secondary\": \"#4F545C\",\n        \"success\": \"#2D7D46\",\n        \"danger\": \"#D83C3E\",\n        \"blurple\": \"#5865F2\",\n        \"grey\": \"#4F545C\",\n        \"gray\": \"#4F545C\",\n        \"green\": \"#2D7D46\",",
        "detail": "chat_exporter.construct.assets.component",
        "documentation": {}
    },
    {
        "label": "Embed",
        "kind": 6,
        "importPath": "chat_exporter.construct.assets.embed",
        "description": "chat_exporter.construct.assets.embed",
        "peekOfCode": "class Embed:\n    r: str\n    g: str\n    b: str\n    title: str\n    description: str\n    author: str\n    image: str\n    thumbnail: str\n    footer: str",
        "detail": "chat_exporter.construct.assets.embed",
        "documentation": {}
    },
    {
        "label": "modules_which_use_none",
        "kind": 5,
        "importPath": "chat_exporter.construct.assets.embed",
        "description": "chat_exporter.construct.assets.embed",
        "peekOfCode": "modules_which_use_none = [\"nextcord\", \"disnake\"]\ndef _gather_checker():\n    if discord.module not in modules_which_use_none and hasattr(discord.Embed, \"Empty\"):\n        return discord.Embed.Empty\n    return None\nclass Embed:\n    r: str\n    g: str\n    b: str\n    title: str",
        "detail": "chat_exporter.construct.assets.embed",
        "documentation": {}
    },
    {
        "label": "Reaction",
        "kind": 6,
        "importPath": "chat_exporter.construct.assets.reaction",
        "description": "chat_exporter.construct.assets.reaction",
        "peekOfCode": "class Reaction:\n    def __init__(self, reaction, guild):\n        self.reaction = reaction\n        self.guild = guild\n    async def flow(self):\n        await self.build_reaction()\n        return self.reaction\n    async def build_reaction(self):\n        if \":\" in str(self.reaction.emoji):\n            emoji_animated = re.compile(r\"&lt;a:.*:.*&gt;\")",
        "detail": "chat_exporter.construct.assets.reaction",
        "documentation": {}
    },
    {
        "label": "MessageConstruct",
        "kind": 6,
        "importPath": "chat_exporter.construct.message",
        "description": "chat_exporter.construct.message",
        "peekOfCode": "class MessageConstruct:\n    message_html: str = \"\"\n    # Asset Types\n    embeds: str = \"\"\n    reactions: str = \"\"\n    components: str = \"\"\n    attachments: str = \"\"\n    time_format: str = \"\"\n    def __init__(\n        self,",
        "detail": "chat_exporter.construct.message",
        "documentation": {}
    },
    {
        "label": "TranscriptDAO",
        "kind": 6,
        "importPath": "chat_exporter.construct.transcript",
        "description": "chat_exporter.construct.transcript",
        "peekOfCode": "class TranscriptDAO:\n    html: str\n    def __init__(\n        self,\n        channel: discord.TextChannel,\n        limit: Optional[int],\n        messages: Optional[List[discord.Message]],\n        pytz_timezone,\n        military_time: bool,\n        fancy_times: bool,",
        "detail": "chat_exporter.construct.transcript",
        "documentation": {}
    },
    {
        "label": "Transcript",
        "kind": 6,
        "importPath": "chat_exporter.construct.transcript",
        "description": "chat_exporter.construct.transcript",
        "peekOfCode": "class Transcript(TranscriptDAO):\n    async def export(self):\n        if not self.messages:\n            self.messages = [message async for message in self.channel(\n                limit=self.limit,\n                before=self.before,\n                after=self.after,\n            )]\n        if not self.after:\n            self.messages.reverse()",
        "detail": "chat_exporter.construct.transcript",
        "documentation": {}
    },
    {
        "label": "clear_cache",
        "kind": 2,
        "importPath": "chat_exporter.ext.cache",
        "description": "chat_exporter.ext.cache",
        "peekOfCode": "def clear_cache():\n    _internal_cache.clear()\ndef cache():\n    def decorator(func):\n        def _make_key(args, kwargs):\n            key = [f'{func.__module__}.{func.__name__}']\n            key.extend(repr(o) for o in args)\n            for k, v in kwargs.items():\n                key.append(repr(k))\n                key.append(repr(v))",
        "detail": "chat_exporter.ext.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 2,
        "importPath": "chat_exporter.ext.cache",
        "description": "chat_exporter.ext.cache",
        "peekOfCode": "def cache():\n    def decorator(func):\n        def _make_key(args, kwargs):\n            key = [f'{func.__module__}.{func.__name__}']\n            key.extend(repr(o) for o in args)\n            for k, v in kwargs.items():\n                key.append(repr(k))\n                key.append(repr(v))\n            return ':'.join(key)\n        @wraps(func)",
        "detail": "chat_exporter.ext.cache",
        "documentation": {}
    },
    {
        "label": "discord_modules",
        "kind": 5,
        "importPath": "chat_exporter.ext.discord_import",
        "description": "chat_exporter.ext.discord_import",
        "peekOfCode": "discord_modules = ['nextcord', 'disnake', 'discord']\nfor module in discord_modules:\n    try:\n        discord = __import__(module)\n        discord.module = module\n        break\n    except ImportError:\n        continue",
        "detail": "chat_exporter.ext.discord_import",
        "documentation": {}
    },
    {
        "label": "DiscordUtils",
        "kind": 6,
        "importPath": "chat_exporter.ext.discord_utils",
        "description": "chat_exporter.ext.discord_utils",
        "peekOfCode": "class DiscordUtils:\n    logo: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-logo.svg'\n    default_avatar: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-default.png'\n    pinned_message_icon: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-pinned.svg'\n    thread_channel_icon: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-thread.svg'\n    file_attachment_audio: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-audio.svg'\n    file_attachment_acrobat: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-acrobat.svg'\n    file_attachment_webcode: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-webcode.svg'\n    file_attachment_code: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-code.svg'\n    file_attachment_document: str = 'https://cdn.jsdelivr.net/gh/mahtoid/DiscordUtils@master/discord-document.svg'",
        "detail": "chat_exporter.ext.discord_utils",
        "documentation": {}
    },
    {
        "label": "valid_category",
        "kind": 2,
        "importPath": "chat_exporter.ext.emoji_convert",
        "description": "chat_exporter.ext.emoji_convert",
        "peekOfCode": "def valid_category(char):\n    try:\n        return unicodedata.category(char) == \"So\"\n    except TypeError:\n        return False\nasync def codepoint(codes):\n    # See https://github.com/twitter/twemoji/issues/419#issuecomment-637360325\n    if \"200d\" not in codes:\n        return \"-\".join([c for c in codes if c != \"fe0f\"])\n    return \"-\".join(codes)",
        "detail": "chat_exporter.ext.emoji_convert",
        "documentation": {}
    },
    {
        "label": "cdn_fmt",
        "kind": 5,
        "importPath": "chat_exporter.ext.emoji_convert",
        "description": "chat_exporter.ext.emoji_convert",
        "peekOfCode": "cdn_fmt = \"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/{codepoint}.png\"\n@cache()\nasync def valid_src(src):\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(src) as resp:\n                return resp.status == 200\n    except aiohttp.ClientConnectorError:\n        return False\ndef valid_category(char):",
        "detail": "chat_exporter.ext.emoji_convert",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "def read_file(filename):\n    with open(filename, \"r\") as f:\n        s = f.read()\n    return s\n# MESSAGES\nstart_message = read_file(dir_path + \"/html/message/start.html\")\nbot_tag = read_file(dir_path + \"/html/message/bot-tag.html\")\nbot_tag_verified = read_file(dir_path + \"/html/message/bot-tag-verified.html\")\nmessage_content = read_file(dir_path + \"/html/message/content.html\")\nmessage_reference = read_file(dir_path + \"/html/message/reference.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "dir_path",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "dir_path = os.path.abspath(os.path.join((os.path.dirname(os.path.realpath(__file__))), \"..\"))\nPARSE_MODE_NONE = 0\nPARSE_MODE_NO_MARKDOWN = 1\nPARSE_MODE_MARKDOWN = 2\nPARSE_MODE_EMBED = 3\nPARSE_MODE_SPECIAL_EMBED = 4\nPARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NONE",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_NONE = 0\nPARSE_MODE_NO_MARKDOWN = 1\nPARSE_MODE_MARKDOWN = 2\nPARSE_MODE_EMBED = 3\nPARSE_MODE_SPECIAL_EMBED = 4\nPARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_NO_MARKDOWN",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_NO_MARKDOWN = 1\nPARSE_MODE_MARKDOWN = 2\nPARSE_MODE_EMBED = 3\nPARSE_MODE_SPECIAL_EMBED = 4\nPARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case\n            k, v = r",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_MARKDOWN",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_MARKDOWN = 2\nPARSE_MODE_EMBED = 3\nPARSE_MODE_SPECIAL_EMBED = 4\nPARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case\n            k, v = r\n            r = (k, v, PARSE_MODE_MARKDOWN)",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_EMBED",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_EMBED = 3\nPARSE_MODE_SPECIAL_EMBED = 4\nPARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case\n            k, v = r\n            r = (k, v, PARSE_MODE_MARKDOWN)\n        k, v, mode = r",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_SPECIAL_EMBED",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_SPECIAL_EMBED = 4\nPARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case\n            k, v = r\n            r = (k, v, PARSE_MODE_MARKDOWN)\n        k, v, mode = r\n        if mode != PARSE_MODE_NONE:",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_REFERENCE",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_REFERENCE = 5\nPARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case\n            k, v = r\n            r = (k, v, PARSE_MODE_MARKDOWN)\n        k, v, mode = r\n        if mode != PARSE_MODE_NONE:\n            v = await ParseMention(v, guild).flow()",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "PARSE_MODE_EMOJI",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "PARSE_MODE_EMOJI = 6\nasync def fill_out(guild, base, replacements):\n    for r in replacements:\n        if len(r) == 2:  # default case\n            k, v = r\n            r = (k, v, PARSE_MODE_MARKDOWN)\n        k, v, mode = r\n        if mode != PARSE_MODE_NONE:\n            v = await ParseMention(v, guild).flow()\n        if mode == PARSE_MODE_MARKDOWN:",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "start_message",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "start_message = read_file(dir_path + \"/html/message/start.html\")\nbot_tag = read_file(dir_path + \"/html/message/bot-tag.html\")\nbot_tag_verified = read_file(dir_path + \"/html/message/bot-tag-verified.html\")\nmessage_content = read_file(dir_path + \"/html/message/content.html\")\nmessage_reference = read_file(dir_path + \"/html/message/reference.html\")\nmessage_interaction = read_file(dir_path + \"/html/message/interaction.html\")\nmessage_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "bot_tag",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "bot_tag = read_file(dir_path + \"/html/message/bot-tag.html\")\nbot_tag_verified = read_file(dir_path + \"/html/message/bot-tag-verified.html\")\nmessage_content = read_file(dir_path + \"/html/message/content.html\")\nmessage_reference = read_file(dir_path + \"/html/message/reference.html\")\nmessage_interaction = read_file(dir_path + \"/html/message/interaction.html\")\nmessage_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "bot_tag_verified",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "bot_tag_verified = read_file(dir_path + \"/html/message/bot-tag-verified.html\")\nmessage_content = read_file(dir_path + \"/html/message/content.html\")\nmessage_reference = read_file(dir_path + \"/html/message/reference.html\")\nmessage_interaction = read_file(dir_path + \"/html/message/interaction.html\")\nmessage_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_content",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_content = read_file(dir_path + \"/html/message/content.html\")\nmessage_reference = read_file(dir_path + \"/html/message/reference.html\")\nmessage_interaction = read_file(dir_path + \"/html/message/interaction.html\")\nmessage_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_reference",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_reference = read_file(dir_path + \"/html/message/reference.html\")\nmessage_interaction = read_file(dir_path + \"/html/message/interaction.html\")\nmessage_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_interaction",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_interaction = read_file(dir_path + \"/html/message/interaction.html\")\nmessage_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_pin",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_pin = read_file(dir_path + \"/html/message/pin.html\")\nmessage_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_thread",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_thread = read_file(dir_path + \"/html/message/thread.html\")\nmessage_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_reference_unknown",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_reference_unknown = read_file(dir_path + \"/html/message/reference_unknown.html\")\nmessage_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "message_body",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "message_body = read_file(dir_path + \"/html/message/message.html\")\nend_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "end_message",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "end_message = read_file(dir_path + \"/html/message/end.html\")\nmeta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "meta_data_temp",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "meta_data_temp = read_file(dir_path + \"/html/message/meta.html\")\n# COMPONENTS\ncomponent_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_button",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "component_button = read_file(dir_path + \"/html/component/component_button.html\")\ncomponent_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_menu",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "component_menu = read_file(dir_path + \"/html/component/component_menu.html\")\ncomponent_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_menu_options",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "component_menu_options = read_file(dir_path + \"/html/component/component_menu_options.html\")\ncomponent_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "component_menu_options_emoji",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "component_menu_options_emoji = read_file(dir_path + \"/html/component/component_menu_options_emoji.html\")\n# EMBED\nembed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_body",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_body = read_file(dir_path + \"/html/embed/body.html\")\nembed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_title",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_title = read_file(dir_path + \"/html/embed/title.html\")\nembed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_description",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_description = read_file(dir_path + \"/html/embed/description.html\")\nembed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_field",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_field = read_file(dir_path + \"/html/embed/field.html\")\nembed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_field_inline",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_field_inline = read_file(dir_path + \"/html/embed/field-inline.html\")\nembed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_footer",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_footer = read_file(dir_path + \"/html/embed/footer.html\")\nembed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_footer_icon",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_footer_icon = read_file(dir_path + \"/html/embed/footer_image.html\")\nembed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_image",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_image = read_file(dir_path + \"/html/embed/image.html\")\nembed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_thumbnail",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_thumbnail = read_file(dir_path + \"/html/embed/thumbnail.html\")\nembed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_author",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_author = read_file(dir_path + \"/html/embed/author.html\")\nembed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "embed_author_icon",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "embed_author_icon = read_file(dir_path + \"/html/embed/author_icon.html\")\n# REACTION\nemoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "emoji",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "emoji = read_file(dir_path + \"/html/reaction/emoji.html\")\ncustom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT\ntotal = read_file(dir_path + \"/html/base.html\")\n# SCRIPT",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "custom_emoji",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "custom_emoji = read_file(dir_path + \"/html/reaction/custom_emoji.html\")\n# ATTACHMENT\nimg_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT\ntotal = read_file(dir_path + \"/html/base.html\")\n# SCRIPT\nfancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "img_attachment",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "img_attachment = read_file(dir_path + \"/html/attachment/image.html\")\nmsg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT\ntotal = read_file(dir_path + \"/html/base.html\")\n# SCRIPT\nfancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")\nchannel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "msg_attachment",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "msg_attachment = read_file(dir_path + \"/html/attachment/message.html\")\naudio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT\ntotal = read_file(dir_path + \"/html/base.html\")\n# SCRIPT\nfancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")\nchannel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "audio_attachment",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "audio_attachment = read_file(dir_path + \"/html/attachment/audio.html\")\nvideo_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT\ntotal = read_file(dir_path + \"/html/base.html\")\n# SCRIPT\nfancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")\nchannel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "video_attachment",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "video_attachment = read_file(dir_path + \"/html/attachment/video.html\")\n# GUILD / FULL TRANSCRIPT\ntotal = read_file(dir_path + \"/html/base.html\")\n# SCRIPT\nfancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")\nchannel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "total = read_file(dir_path + \"/html/base.html\")\n# SCRIPT\nfancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")\nchannel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "fancy_time",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "fancy_time = read_file(dir_path + \"/html/script/fancy_time.html\")\nchannel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "channel_topic",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "channel_topic = read_file(dir_path + \"/html/script/channel_topic.html\")\nchannel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "channel_subject",
        "kind": 5,
        "importPath": "chat_exporter.ext.html_generator",
        "description": "chat_exporter.ext.html_generator",
        "peekOfCode": "channel_subject = read_file(dir_path + \"/html/script/channel_subject.html\")",
        "detail": "chat_exporter.ext.html_generator",
        "documentation": {}
    },
    {
        "label": "ParseMarkdown",
        "kind": 6,
        "importPath": "chat_exporter.parse.markdown",
        "description": "chat_exporter.parse.markdown",
        "peekOfCode": "class ParseMarkdown:\n    def __init__(self, content):\n        self.content = content\n    async def standard_message_flow(self):\n        self.https_http_links()\n        self.parse_normal_markdown()\n        self.parse_code_block_markdown()\n        await self.parse_emoji()\n        return self.content\n    async def link_embed_flow(self):",
        "detail": "chat_exporter.parse.markdown",
        "documentation": {}
    },
    {
        "label": "ParseMention",
        "kind": 6,
        "importPath": "chat_exporter.parse.mention",
        "description": "chat_exporter.parse.mention",
        "peekOfCode": "class ParseMention:\n    REGEX_ROLES = r\"&lt;@&amp;([0-9]+)&gt;\"\n    REGEX_ROLES_2 = r\"<@&([0-9]+)>\"\n    REGEX_MEMBERS = r\"&lt;@!?([0-9]+)&gt;\"\n    REGEX_MEMBERS_2 = r\"<@!?([0-9]+)>\"\n    REGEX_CHANNELS = r\"&lt;#([0-9]+)&gt;\"\n    REGEX_CHANNELS_2 = r\"<#([0-9]+)>\"\n    REGEX_EMOJIS = r\"&lt;a?(:[^\\n:]+:)[0-9]+&gt;\"\n    REGEX_EMOJIS_2 = r\"<a?(:[^\\n:]+:)[0-9]+>\"\n    REGEX_TIME_HOLDER = (",
        "detail": "chat_exporter.parse.mention",
        "documentation": {}
    },
    {
        "label": "pass_bot",
        "kind": 2,
        "importPath": "chat_exporter.parse.mention",
        "description": "chat_exporter.parse.mention",
        "peekOfCode": "def pass_bot(_bot):\n    # Bot is used to fetch a user who is no longer inside a guild\n    # This will stop the user from appearing as 'Unknown' which some people do not want\n    global bot\n    bot = _bot\nclass ParseMention:\n    REGEX_ROLES = r\"&lt;@&amp;([0-9]+)&gt;\"\n    REGEX_ROLES_2 = r\"<@&([0-9]+)>\"\n    REGEX_MEMBERS = r\"&lt;@!?([0-9]+)&gt;\"\n    REGEX_MEMBERS_2 = r\"<@!?([0-9]+)>\"",
        "detail": "chat_exporter.parse.mention",
        "documentation": {}
    },
    {
        "label": "Colors",
        "kind": 6,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "class Colors: \n    \"\"\"Just colors\"\"\"\n    red = 0xffffff\n    green = 0xffffff\n    yellow = 0xffffff\n    gold = 0xb4baf7\n    default = 0x495063\n    rainbow = 0x2f3136\nclass Emojis:\n    \"\"\"Just emojis\"\"\"",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "kind": 6,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "class Emojis:\n    \"\"\"Just emojis\"\"\"\n    check = \"<:greenTick:1230421239634595860>\"\n    wrong = \"<:redTick:1230421267514003457>\"\n    warning = \"<:rival_warning:1230421852770271272>\"\n    spotify_emote = \"<:emoji_15:1231454735215628299>\"\nclass Func:\n def ordinal(num: int):\n   \"\"\"Convert from number to ordinal (10 - 10th)\"\"\" \n   num = str(num) ",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "Func",
        "kind": 6,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "class Func:\n def ordinal(num: int):\n   \"\"\"Convert from number to ordinal (10 - 10th)\"\"\" \n   num = str(num) \n   if num in [\"11\", \"12\", \"13\"]:\n       return num + \"th\"\n   if num.endswith(\"1\"):\n      return num + \"st\"\n   elif num.endswith(\"2\"):\n      return num + \"nd\"",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "class Database:\n    def get(self, filename: str = None):\n        with open(f\"{sys.path[0]}/db/{filename}.json\", \"r\") as file:\n            data = json.load(file)\n        file.close()\n        return data\n    def put(self, data, filename: str = None):\n        with open(f\"{sys.path[0]}/db/{filename}.json\", \"w\") as file:\n            json.dump(data, file, indent=4)\n        file.close()",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "read_json",
        "kind": 2,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "def read_json(filename: str):\n    return Database().get(filename)\ndef write_json(data, filename: str):\n    return Database().put(data, filename)\nasync def get_parts(params):\n    params = params.replace(\"{embed}\", \"\")\n    return [p[1:][:-1] for p in params.split(\"$v\")]\nasync def getwhi(query):\n    url = f\"https://weheartit.com/search/entries?query={query.replace(' ', '+')}\"\n    from bs4 import BeautifulSoup",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "write_json",
        "kind": 2,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "def write_json(data, filename: str):\n    return Database().put(data, filename)\nasync def get_parts(params):\n    params = params.replace(\"{embed}\", \"\")\n    return [p[1:][:-1] for p in params.split(\"$v\")]\nasync def getwhi(query):\n    url = f\"https://weheartit.com/search/entries?query={query.replace(' ', '+')}\"\n    from bs4 import BeautifulSoup\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as x:",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "get_partss",
        "kind": 2,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "def get_partss(params):\n    x = {}\n    notembed, embed = params.split(\"{extra}\")[0].split(\"{embed}\")\n    x[\"notembed\"] = [p[1:][:-1] for p in notembed.split(\"$v\")]\n    x[\"embed\"] = [p[1:][:-1] for p in embed.split(\"$v\")]\n    x[\"extra\"] = [p for p in params.split(\"{extra}\")[1].split()]\n    return x\ndef ordinal(n):\n    return \"%d%s\" % (n, \"tsnrhtdd\"[(n // 10 % 10 != 1) * (n % 10 < 4) * n % 10 :: 4])\nasync def to_objectt(params):",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "kind": 2,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "def ordinal(n):\n    return \"%d%s\" % (n, \"tsnrhtdd\"[(n // 10 % 10 != 1) * (n % 10 < 4) * n % 10 :: 4])\nasync def to_objectt(params):\n    x = {}\n    parts = get_partss(params)\n    fields = []\n    content = None\n    files = []\n    view = discord.ui.View()\n    for part in parts[\"notembed\"]:",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "paginator",
        "kind": 5,
        "importPath": "cogs.modules.utils",
        "description": "cogs.modules.utils",
        "peekOfCode": "paginator = pg\nclass Colors: \n    \"\"\"Just colors\"\"\"\n    red = 0xffffff\n    green = 0xffffff\n    yellow = 0xffffff\n    gold = 0xb4baf7\n    default = 0x495063\n    rainbow = 0x2f3136\nclass Emojis:",
        "detail": "cogs.modules.utils",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout=60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in [\n            978930369392951366,\n            979353019235840000,\n        ]:\n            await interaction.response.send_message(",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "xddd",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class xddd(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Ban\", style=discord.ButtonStyle.red)\n    async def _b(self, interaction, button):\n        self.value = \"ban\"\n        self.stop()\n    @discord.ui.button(label=\"Kick\", style=discord.ButtonStyle.green)\n    async def _k(self, interaction, button):",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "whitelistMenu",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class whitelistMenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, user: discord.Member):\n        options = [\n            discord.SelectOption(label=\"Anti Ban\", value=\"BAN\"),\n            discord.SelectOption(label=\"Anti Bot\", value=\"BOT\"),\n            discord.SelectOption(label=\"Anti Channel Create\", value=\"CHANNEL CREATE\"),\n            discord.SelectOption(label=\"Anti Channel Delete\", value=\"CHANNEL DELETE\"),\n            discord.SelectOption(label=\"Anti Channel Update\", value=\"CHANNEL UPDATE\"),\n            discord.SelectOption(label=\"Anti Guild Update\", value=\"GUILD UPDATE\"),\n            discord.SelectOption(label=\"Anti Kick\", value=\"KICK\"),",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "wlMenu",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class wlMenu(discord.ui.View):\n    def __init__(self, ctx: commands.Context, user: discord.Member):\n        super().__init__(timeout=60)\n        self.add_item(whitelistMenu(ctx, user))\n        self.ctx = ctx\n        self.user = user\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in [\n            978930369392951366,\n            979353019235840000,",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "whitelistedMenu",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class whitelistedMenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context):\n        options = [\n            discord.SelectOption(label=\"Anti Ban\", value=\"BAN\"),\n            discord.SelectOption(label=\"Anti Bot\", value=\"BOT\"),\n            discord.SelectOption(label=\"Anti Channel Create\", value=\"CHANNEL CREATE\"),\n            discord.SelectOption(label=\"Anti Channel Delete\", value=\"CHANNEL DELETE\"),\n            discord.SelectOption(label=\"Anti Channel Update\", value=\"CHANNEL UPDATE\"),\n            discord.SelectOption(label=\"Anti Guild Update\", value=\"GUILD UPDATE\"),\n            discord.SelectOption(label=\"Anti Kick\", value=\"KICK\"),",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "wldMenu",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class wldMenu(discord.ui.View):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(timeout=60)\n        self.add_item(whitelistedMenu(ctx))\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in [\n            978930369392951366,\n            979353019235840000,\n        ]:",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "unwhitelistMenu",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class unwhitelistMenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, user: discord.Member):\n        options = [\n            discord.SelectOption(label=\"Anti Ban\", value=\"BAN\"),\n            discord.SelectOption(label=\"Anti Bot\", value=\"BOT\"),\n            discord.SelectOption(label=\"Anti Channel Create\", value=\"CHANNEL CREATE\"),\n            discord.SelectOption(label=\"Anti Channel Delete\", value=\"CHANNEL DELETE\"),\n            discord.SelectOption(label=\"Anti Channel Update\", value=\"CHANNEL UPDATE\"),\n            discord.SelectOption(label=\"Anti Guild Update\", value=\"GUILD UPDATE\"),\n            discord.SelectOption(label=\"Anti Kick\", value=\"KICK\"),",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "uwlMenu",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class uwlMenu(discord.ui.View):\n    def __init__(self, ctx: commands.Context, user: discord.Member):\n        super().__init__(timeout=60)\n        self.add_item(unwhitelistMenu(ctx, user))\n        self.ctx = ctx\n        self.user = user\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in [\n            978930369392951366,\n            979353019235840000,",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "antinuke",
        "kind": 6,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "class antinuke(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        invoke_without_command=True,\n        description=\"Shows the help menu for Antinuke commands\",\n    )\n    async def antinuke(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "wl",
        "kind": 2,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "def wl(guild_id, user_id, type):\n    query = \"SELECT * FROM  wl WHERE guild_id = ?\"\n    val = (guild_id,)\n    with sqlite3.connect(\"./database.sqlite3\") as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        anti_db = cursor.fetchone()\n    if anti_db is None:\n        return False",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "punish",
        "kind": 2,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "def punish(guild_id):\n    query = \"SELECT * FROM  punish WHERE guild_id = ?\"\n    val = (guild_id,)\n    with sqlite3.connect(\"./database.sqlite3\") as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        anti_db = cursor.fetchone()\n    if anti_db[\"PUNISHMENT\"] == \"KICK\":\n        return False",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "def check(guild_id, type):\n    query = \"SELECT * FROM  toggle WHERE guild_id = ?\"\n    val = (guild_id,)\n    with sqlite3.connect(\"./database.sqlite3\") as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        anti_db = cursor.fetchone()\n    if anti_db is None:\n        return False",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "toggle",
        "kind": 2,
        "importPath": "cogs.antinuke",
        "description": "cogs.antinuke",
        "peekOfCode": "def toggle(guild, type, icon, prefix):\n    query = \"SELECT * FROM  toggle WHERE guild_id = ?\"\n    val = (guild.id,)\n    with sqlite3.connect(\"./database.sqlite3\") as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        anti_db = cursor.fetchone()\n    if anti_db is None or anti_db[\"ALL\"] == 0:\n        em = discord.Embed(",
        "detail": "cogs.antinuke",
        "documentation": {}
    },
    {
        "label": "autopost",
        "kind": 6,
        "importPath": "cogs.autopost",
        "description": "cogs.autopost",
        "peekOfCode": "class autopost(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n      async with self.bot.db.cursor() as cursor: \n        await cursor.execute(\"CREATE TABLE IF NOT EXISTS female (guild_id INTEGER, channel_id INTEGER)\")\n        await cursor.execute(\"CREATE TABLE IF NOT EXISTS male (guild_id INTEGER, channel_id INTEGER)\")\n        await cursor.execute(\"CREATE TABLE IF NOT EXISTS anime (guild_id INTEGER, channel_id INTEGER)\")\n        await cursor.execute(\"CREATE TABLE IF NOT EXISTS banner (guild_id INTEGER, channel_id INTEGER)\")",
        "detail": "cogs.autopost",
        "documentation": {}
    },
    {
        "label": "autoreact",
        "kind": 6,
        "importPath": "cogs.autoreact",
        "description": "cogs.autoreact",
        "peekOfCode": "class autoreact(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n        setattr(self.bot, \"db\", await aiosqlite.connect(\"main.db\"))\n        async with self.bot.db.cursor() as cursor:\n            await cursor.execute(\"CREATE TABLE IF NOT EXISTS autoreact (trigger TEXT, emoji TEXT, guild_id INTEGER)\")\n        await self.bot.db.commit()\n    @commands.group(help=\"set an autoreact for the server\", description=\"utility\", usage=\"[subcommand] [trigger] [emoji]\", brief=\"autoreact add - add an autoreact\\nautoreact remove - remove an autoreact\\nautoreact list - see a list of autoreact\", aliases = ['art'])",
        "detail": "cogs.autoreact",
        "documentation": {}
    },
    {
        "label": "autoresponder",
        "kind": 6,
        "importPath": "cogs.autoresponder",
        "description": "cogs.autoresponder",
        "peekOfCode": "class autoresponder(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot \n        self._cd = commands.CooldownMapping.from_cooldown(3, 6, commands.BucketType.guild) \n    def get_ratelimit(self, message):\n        bucket = self._cd.get_bucket(message)\n        return bucket.update_rate_limit()\n    @commands.Cog.listener()\n    async def on_ready(self):\n        async with self.bot.db.cursor() as cursor: ",
        "detail": "cogs.autoresponder",
        "documentation": {}
    },
    {
        "label": "autorole",
        "kind": 6,
        "importPath": "cogs.autorole",
        "description": "cogs.autorole",
        "peekOfCode": "class autorole(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n        setattr(self.bot, \"db\", await aiosqlite.connect(\"main.db\"))\n        async with self.bot.db.cursor() as cursor:\n            await cursor.execute(\"CREATE TABLE IF NOT EXISTS autorole (role INTEGER, guild INTEGER)\")\n        await self.bot.db.commit()\n    @commands.group(aliases = ['arl'])",
        "detail": "cogs.autorole",
        "documentation": {}
    },
    {
        "label": "chatfilter",
        "kind": 6,
        "importPath": "cogs.chatfilter",
        "description": "cogs.chatfilter",
        "peekOfCode": "class chatfilter(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n        async with self.bot.db.cursor() as cursor: \n            await cursor.execute(\"CREATE TABLE IF NOT EXISTS chatfilter (trigger TEXT, guild_id INTEGER)\")\n        await self.bot.db.commit()\n    @commands.Cog.listener()\n    async def on_message(self, message: discord.Message):",
        "detail": "cogs.chatfilter",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "importPath": "cogs.config",
        "description": "cogs.config",
        "peekOfCode": "class config(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @Cog.listener()\n    async def on_member_join(self, member: Member):\n        if member.bot: return   \n        results = await self.bot.pg_conn.fetch(\"SELECT * FROM pingonjoin WHERE guild_id = $1\", member.guild.id)\n        members = [m for m in member.guild.members if (datetime.datetime.now() - m.joined_at.replace(tzinfo=None)).total_seconds() < 180]\n        for result in results: \n         channel = member.guild.get_channel(int(result[0]))",
        "detail": "cogs.config",
        "documentation": {}
    },
    {
        "label": "poj_cache",
        "kind": 5,
        "importPath": "cogs.config",
        "description": "cogs.config",
        "peekOfCode": "poj_cache = {} \nclass config(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @Cog.listener()\n    async def on_member_join(self, member: Member):\n        if member.bot: return   \n        results = await self.bot.pg_conn.fetch(\"SELECT * FROM pingonjoin WHERE guild_id = $1\", member.guild.id)\n        members = [m for m in member.guild.members if (datetime.datetime.now() - m.joined_at.replace(tzinfo=None)).total_seconds() < 180]\n        for result in results: ",
        "detail": "cogs.config",
        "documentation": {}
    },
    {
        "label": "event",
        "kind": 6,
        "importPath": "cogs.event",
        "description": "cogs.event",
        "peekOfCode": "class event(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @tasks.loop(time=datetime.time(hour=0, minute=0, tzinfo=pytz.timezone(\"Asia/Kolkata\")))\n    async def daily(self):\n        query = (\"SELECT * FROM daily WHERE id = ?\")\n        val = (self.bot.user.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()",
        "detail": "cogs.event",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.extra",
        "description": "cogs.extra",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [1106094873951621120, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass OnOrOff(BasicView):",
        "detail": "cogs.extra",
        "documentation": {}
    },
    {
        "label": "OnOrOff",
        "kind": 6,
        "importPath": "cogs.extra",
        "description": "cogs.extra",
        "peekOfCode": "class OnOrOff(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(emoji=\"<:confirm:1156150922200748053>\", custom_id='Yes', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        self.value = 'Yes'\n        self.stop()\n    @discord.ui.button(emoji=\"<:cross:1156150663802265670>\", custom_id='No', style=discord.ButtonStyle.danger)\n    async def truth(self, interaction, button):",
        "detail": "cogs.extra",
        "documentation": {}
    },
    {
        "label": "PngOrGif",
        "kind": 6,
        "importPath": "cogs.extra",
        "description": "cogs.extra",
        "peekOfCode": "class PngOrGif(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"PNG\", custom_id='png', style=discord.ButtonStyle.green)\n    async def png(self, interaction, button):\n        self.value = 'png'\n        self.stop()\n    @discord.ui.button(label=\"GIF\", custom_id='gif', style=discord.ButtonStyle.green)\n    async def gif(self, interaction, button):",
        "detail": "cogs.extra",
        "documentation": {}
    },
    {
        "label": "night",
        "kind": 6,
        "importPath": "cogs.extra",
        "description": "cogs.extra",
        "peekOfCode": "class night(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=120)\n        self.value = None\n    @discord.ui.button(label=\"Simple Roles Only\", custom_id='simple', style=discord.ButtonStyle.green)\n    async def simple(self, interaction, button):\n        self.value = 'simple'\n        self.stop()\n    @discord.ui.button(label=\"Bot Roles Only\", custom_id='bot', style=discord.ButtonStyle.green)\n    async def bot(self, interaction, button):",
        "detail": "cogs.extra",
        "documentation": {}
    },
    {
        "label": "extra",
        "kind": 6,
        "importPath": "cogs.extra",
        "description": "cogs.extra",
        "peekOfCode": "class extra(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.autopfp_task.start()\n    @tasks.loop(minutes=10)\n    async def autopfp_task(self):\n        await self.bot.wait_until_ready()\n        query = \"SELECT * FROM  pfp\"\n        with sqlite3.connect('./database.sqlite3') as db:\n                    db.row_factory = sqlite3.Row",
        "detail": "cogs.extra",
        "documentation": {}
    },
    {
        "label": "Firstmessage",
        "kind": 6,
        "importPath": "cogs.firstmsg",
        "description": "cogs.firstmsg",
        "peekOfCode": "class Firstmessage(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n@commands.command(usage=\"<channel>\", aliases=['firstmsg'], description=\"get the first message from a certain channel\")\n@commands.cooldown(1, 6, commands.BucketType.user)\nasync def firstmessage(self, ctx: commands.Context, *, channel: discord.TextChannel=None): \n   channel = channel or ctx.channel\n   message = [m async for m in channel.history(oldest_first=True, limit=1)][0]\n   embed = discord.Embed(color=0x6d827d, title=f\"first message in {channel.name}\", description=message.content, timestamp=message.created_at)\n   embed.set_author(name=message.author, icon_url=message.author.display_avatar.url)",
        "detail": "cogs.firstmsg",
        "documentation": {}
    },
    {
        "label": "RockPaperScissors",
        "kind": 6,
        "importPath": "cogs.fun",
        "description": "cogs.fun",
        "peekOfCode": "class RockPaperScissors(discord.ui.View): \n  def __init__(self, ctx: commands.Context):\n    self.ctx = ctx   \n    self.get_emoji = {\"rock\": \"🪨\", \"paper\": \"📰\", \"scissors\": \"✂️\"} \n    self.status = False \n    super().__init__(timeout=10)\n  async def disable_buttons(self): \n   for item in self.children: \n    item.disabled = True \n   await self.message.edit(view=self)   ",
        "detail": "cogs.fun",
        "documentation": {}
    },
    {
        "label": "TicTacToeButton",
        "kind": 6,
        "importPath": "cogs.fun",
        "description": "cogs.fun",
        "peekOfCode": "class TicTacToeButton(discord.ui.Button['TicTacToe']):\n    def __init__(self, x: int, y: int, player1: discord.Member, player2: discord.Member):\n        super().__init__(style=discord.ButtonStyle.secondary, label='\\u200b', row=y)\n        self.x = x\n        self.y = y\n        self.player1 = player1\n        self.player2 = player2\n    async def callback(self, interaction: discord.Interaction):\n        assert self.view is not None\n        view: TicTacToe = self.view",
        "detail": "cogs.fun",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "kind": 6,
        "importPath": "cogs.fun",
        "description": "cogs.fun",
        "peekOfCode": "class TicTacToe(discord.ui.View):\n    children: List[TicTacToeButton]\n    X = -1\n    O = 1\n    Tie = 2\n    def __init__(self, player1: discord.Member, player2: discord.Member):\n        super().__init__()\n        self.current_player = self.X\n        self.board = [\n            [0, 0, 0],",
        "detail": "cogs.fun",
        "documentation": {}
    },
    {
        "label": "BlackTea",
        "kind": 6,
        "importPath": "cogs.fun",
        "description": "cogs.fun",
        "peekOfCode": "class BlackTea: \n    \"\"\"BlackTea backend variables\"\"\"\n    MatchStart = {}\n    lifes = {}\n    async def get_string(): \n      lis = await BlackTea.get_words()\n      word = random.choice([l for l in lis if len(l) > 3])\n      return word[:3]\n    async def get_words(): \n      async with aiohttp.ClientSession() as cs: ",
        "detail": "cogs.fun",
        "documentation": {}
    },
    {
        "label": "TypeRace",
        "kind": 6,
        "importPath": "cogs.fun",
        "description": "cogs.fun",
        "peekOfCode": "class TypeRace:       \n   \"\"\"TypeRace backend variables\"\"\"    \n   async def getanswer(): \n    async with aiohttp.ClientSession() as cs: \n      async with cs.get(\"https://www.mit.edu/~ecprice/wordlist.100000\") as r: \n        byte = await r.read()\n        data = str(byte, 'utf-8')\n        data = data.splitlines()\n        mes = \"\"\n        for _ in range(10):",
        "detail": "cogs.fun",
        "documentation": {}
    },
    {
        "label": "fun",
        "kind": 6,
        "importPath": "cogs.fun",
        "description": "cogs.fun",
        "peekOfCode": "class fun(commands.Cog):\n    def __init__(self, bot: commands.AutoShardedBot):\n        self.bot = bot\n    @commands.command(aliases=[\"goodmorning\"], help=\"fun\", description=\"says good morning\")\n    async def gm(self, ctx: commands.Context): \n      await ctx.send(f\"Good Morning {ctx.author.mention}!\")\n    @commands.command(help=\"fun\", description=\"says good night\")\n    async def gn(self, ctx: commands.Context): \n      await ctx.send(f\"💤 Good Night {ctx.author.mention}!\")  \n    @commands.command(name=\"choose\", description=\"choose between options\", usage=\"[choices separated by a comma]\\nexample ;choose apple, pear, carrot\")",
        "detail": "cogs.fun",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass OnOrOff(BasicView):",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "OnOrOff",
        "kind": 6,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "class OnOrOff(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"User Avatar\", custom_id='Yes', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        self.value = 'Yes'\n        self.stop()\n    @discord.ui.button(label=\"Server Avatar\", custom_id='No', style=discord.ButtonStyle.red)\n    async def truth(self, interaction, button):",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 6,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "class create(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=120)\n        self.value = None\n    @discord.ui.button(label=\"Users only\", custom_id='users', style=discord.ButtonStyle.green)\n    async def users(self, interaction, button):\n        self.value = 'users'\n        self.stop()\n    @discord.ui.button(label=\"Bots Only\", custom_id='bots', style=discord.ButtonStyle.green)\n    async def bots(self, interaction, button):",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "globalorlocal",
        "kind": 6,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "class globalorlocal(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=120)\n        self.value = None\n    @discord.ui.button(label=\"All Servers (Mutuals)\", custom_id='users', style=discord.ButtonStyle.secondary)\n    async def users(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = 'global'\n        self.stop()\n    @discord.ui.button(label=\"Only in this server (Current)\", custom_id='bots', style=discord.ButtonStyle.secondary)",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "general",
        "kind": 6,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "class general(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    async def time_formatter(self, seconds: float):\n        minutes, seconds = divmod(int(seconds), 60)\n        hours, minutes = divmod(minutes, 60)\n        days, hours = divmod(hours, 24)\n        tmp = ((str(days) + \" days, \") if days else \"\") + \\\n            ((str(hours) + \" hours, \") if hours else \"\") + \\\n            ((str(minutes) + \" minutes, \") if minutes else \"\") + \\",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "identify_code_language",
        "kind": 2,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "def identify_code_language(code):\n    # Define regular expressions for common programming languages\n    languages = {\n        'Python': r'\\b(def|if|elif|else|while|for|print|import|from|as|with|try|except|raise|class|return)\\b',\n        'Java': r'\\b(public|private|protected|abstract|class|void|int|double|float|boolean|char|String|static|final|extends|implements|new|if|else|while|for|switch|case|default|break|continue|return)\\b',\n        'C#': r'\\b(public|private|protected|internal|abstract|sealed|class|void|int|double|float|bool|string|static|readonly|using|namespace|try|catch|finally|if|else|while|for|switch|case|default|break|continue|return)\\b',\n        'JavaScript': r'\\b(function|var|let|const|if|else|while|for|switch|case|default|break|continue|return|import|export|class|extends|super|async|await|try|catch|finally)\\b',\n        'Go': r'\\b(func|var|const|if|else|switch|case|default|for|range|import|package|type|struct|interface|defer|panic|recover)\\b',\n        'Ruby': r'\\b(def|if|elsif|else|while|for|case|when|do|end|module|class|require|include|extend|public|private|protected|self|super|return)\\b',\n        'PHP': r'\\b(function|if|else|while|for|switch|case|default|break|continue|return|require|include|class|public|private|protected|static|final|abstract|interface|namespace)\\b',",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "converttime",
        "kind": 2,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "def converttime(seconds):\n    time = int(seconds)\n    month = time // (30 * 24 * 3600)\n    time = time % (24 * 3600)\n    day = time // (24 * 3600)\n    time = time % (24 * 3600)\n    hour = time // 3600\n    time %= 3600\n    minutes = time // 60\n    time %= 60",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "openai.api_key = \"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\"\ngoogle_key = \"AIzaSyBHuEaTZ18Is8CiR1P_iij4ltSrKdmT6A0\"\ncx = \"fa4d8703bfda53ae4\"\ndr = {\"Music\": \"<a:musical:1152999917724385421>\",\n      \"General\": \"<:help:1152981730458878075>\"}\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "google_key",
        "kind": 5,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "google_key = \"AIzaSyBHuEaTZ18Is8CiR1P_iij4ltSrKdmT6A0\"\ncx = \"fa4d8703bfda53ae4\"\ndr = {\"Music\": \"<a:musical:1152999917724385421>\",\n      \"General\": \"<:help:1152981730458878075>\"}\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366]:",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "cx",
        "kind": 5,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "cx = \"fa4d8703bfda53ae4\"\ndr = {\"Music\": \"<a:musical:1152999917724385421>\",\n      \"General\": \"<:help:1152981730458878075>\"}\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "dr",
        "kind": 5,
        "importPath": "cogs.general",
        "description": "cogs.general",
        "peekOfCode": "dr = {\"Music\": \"<a:musical:1152999917724385421>\",\n      \"General\": \"<:help:1152981730458878075>\"}\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.general",
        "documentation": {}
    },
    {
        "label": "Giveaway",
        "kind": 6,
        "importPath": "cogs.giveaway",
        "description": "cogs.giveaway",
        "peekOfCode": "class Giveaway(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    def cog_load(self) -> None:\n        self.GiveawayEnd.start()\n    @commands.Cog.listener()\n    async def on_ready(self):\n        async with self.bot.db.cursor() as cursor: \n            await cursor.execute(\"CREATE TABLE IF NOT EXISTS Giveaway (giveaway_id INT PRIMARY KEY, time DATETIME, text NVARCHAR(255), message_id INT, channel_id INT, guild_id INT, host_id INT, start_time DATETIME, ends_at DATETIME, prize NVARCHAR(255), winners INT);\") \n        await self.bot.db.commit()",
        "detail": "cogs.giveaway",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "cogs.giveaway",
        "description": "cogs.giveaway",
        "peekOfCode": "def convert(time):\n    pos = [\"s\",\"m\",\"h\",\"d\"]\n    time_dict = {\"s\" : 1, \"m\" : 60, \"h\" : 3600 , \"d\" : 86400 , \"f\" : 259200}\n    unit = time[-1]\n    if unit not in pos:\n      return\n    try:\n        val = int(time[:-1])\n    except ValueError:\n            return",
        "detail": "cogs.giveaway",
        "documentation": {}
    },
    {
        "label": "WinnerConverter",
        "kind": 2,
        "importPath": "cogs.giveaway",
        "description": "cogs.giveaway",
        "peekOfCode": "def WinnerConverter(winner):\n    try:\n        int(winner)\n    except ValueError:\n        try:\n           return int(winner[:-1])\n        except:\n            return -4\n    return winner\nclass Giveaway(commands.Cog):",
        "detail": "cogs.giveaway",
        "documentation": {}
    },
    {
        "label": "Help",
        "kind": 6,
        "importPath": "cogs.help",
        "description": "cogs.help",
        "peekOfCode": "class Help(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.command()\n    async def help(self,ctx):\n        self.embed = discord.Embed(description=\"https://awarebot.tech/help @ https://awarebot.tech/support\", color=0xffffff)\n        await ctx.send(embed=self.embed)\n        await ctx.send(content='**visit the web for help TwT**', embed=embed)\nasync def setup(bot) -> None:\n    await bot.add_cog(Help(bot))",
        "detail": "cogs.help",
        "documentation": {}
    },
    {
        "label": "roledropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class roledropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            c = discord.utils.get(ctx.guild.roles, id=i)\n            options.append(discord.SelectOption(label=f\"{c.name}\", value=c.id))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the roles to bypass\",\n                min_values=1,\n                max_values=1,",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rolemenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rolemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(channeldropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "channeldropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class channeldropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            c = discord.utils.get(ctx.guild.channels, id=i)\n            options.append(discord.SelectOption(label=f\"{c.name}\", value=c.id))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the channels to bypass\",\n                min_values=1,\n                max_values=1,",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "channelmenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class channelmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(channeldropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "cmddropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class cmddropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            options.append(discord.SelectOption(label=f\"{i.capitalize()}\", value=i.lower()))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the commands to bypass\",\n                min_values=1,\n                max_values=1,\n                options=[discord.SelectOption(label=f\"Aware\", value=\"Aware\")],",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "cmdmenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class cmdmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(cmddropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "moduledropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class moduledropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            options.append(discord.SelectOption(label=f\"{i.capitalize()}\", value=i.lower()))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the modules to bypass\",\n                min_values=1,\n                max_values=1,\n                options=[discord.SelectOption(label=f\"Aware\", value=\"Aware\")],",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "modulemenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class modulemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(moduledropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "mainview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class mainview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=60)\n        self.ctx = ctx\n        self.user = user\n        if isinstance(user, discord.TextChannel):\n            self._channelsss.disabled = True\n        by_db = getbydata(self.ctx.guild.id)\n        if by_db is not None:\n            if isinstance(self.user, discord.Member):",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rroledropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rroledropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            c = discord.utils.get(ctx.guild.roles, id=i)\n            options.append(discord.SelectOption(label=f\"{c.name}\", value=c.id))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the roles to remove bypass\",\n                min_values=1,\n                max_values=1,",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rrolemenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rrolemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(channeldropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rchanneldropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rchanneldropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            c = discord.utils.get(ctx.guild.channels, id=i)\n            options.append(discord.SelectOption(label=f\"{c.name}\", value=c.id))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the channels to remove bypass\",\n                min_values=1,\n                max_values=1,",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rchannelmenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rchannelmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(channeldropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rcmddropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rcmddropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            options.append(discord.SelectOption(label=f\"{i.capitalize()}\", value=i.lower()))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the commands to remove bypass\",\n                min_values=1,\n                max_values=1,\n                options=[discord.SelectOption(label=f\"Aware\", value=\"Aware\")],",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rcmdmenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rcmdmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(cmddropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rmoduledropdownmenu",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rmoduledropdownmenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        options = []\n        for i in opt:\n            options.append(discord.SelectOption(label=f\"{i.capitalize()}\", value=i.lower()))\n        if len(opt) == 0:\n            super().__init__(placeholder=\"Select the modules to remove bypass\",\n                min_values=1,\n                max_values=1,\n                options=[discord.SelectOption(label=f\"Aware\", value=\"Aware\")],",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rmodulemenuview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rmodulemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: list, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.user = user\n        self.add_item(moduledropdownmenu(self.ctx, opt, user))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "rmainview",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class rmainview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, user: Union[discord.Member, discord.Role, discord.TextChannel]):\n        super().__init__(timeout=60)\n        self.ctx = ctx\n        self.user = user\n        if isinstance(user, discord.TextChannel):\n            self._channedfdsflsss.disabled = True\n        by_db = getbydata(self.ctx.guild.id)\n        if by_db is not None:\n            if isinstance(self.user, discord.Member):",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "ignore",
        "kind": 6,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "class ignore(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(invoke_without_command=True, name=\"ignore\", description=\"Shows The help menu for ignore\")\n    async def ignore(self, ctx:commands.Context):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"\n        xd = discord.utils.get(self.bot.users, id=978930369392951366)\n        anay = str(xd)",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "getigdata",
        "kind": 2,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "def getigdata(guild_id):\n    query = \"SELECT * FROM  ignore WHERE guild_id = ?\"\n    val = (guild_id,)\n    with sqlite3.connect('database.sqlite3') as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        ig_db = cursor.fetchone()\n    return ig_db\ndef getbydata(guild_id):",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "getbydata",
        "kind": 2,
        "importPath": "cogs.ignore",
        "description": "cogs.ignore",
        "peekOfCode": "def getbydata(guild_id):\n    query = \"SELECT * FROM  bypass WHERE guild_id = ?\"\n    val = (guild_id,)\n    with sqlite3.connect('database.sqlite3') as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        ig_db = cursor.fetchone()\n    return ig_db\nclass roledropdownmenu(discord.ui.Select):",
        "detail": "cogs.ignore",
        "documentation": {}
    },
    {
        "label": "enablemenu",
        "kind": 6,
        "importPath": "cogs.invc",
        "description": "cogs.invc",
        "peekOfCode": "class enablemenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, role: discord.Role):\n        options = []\n        query = \"SELECT * FROM  invc WHERE guild_id = ?\"\n        val = (ctx.guild.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()\n            cursor.execute(query, val)\n            log_db = cursor.fetchone()",
        "detail": "cogs.invc",
        "documentation": {}
    },
    {
        "label": "enableview",
        "kind": 6,
        "importPath": "cogs.invc",
        "description": "cogs.invc",
        "peekOfCode": "class enableview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, role: discord.Role):\n        super().__init__(timeout=60)\n        self.add_item(enablemenu(ctx, role))\n        self.ctx = ctx\n        self.role = role\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.invc",
        "documentation": {}
    },
    {
        "label": "disablemenu",
        "kind": 6,
        "importPath": "cogs.invc",
        "description": "cogs.invc",
        "peekOfCode": "class disablemenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, role: discord.Role=None):\n        options = []\n        query = \"SELECT * FROM  invc WHERE guild_id = ?\"\n        val = (ctx.guild.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()\n            cursor.execute(query, val)\n            log_db = cursor.fetchone()",
        "detail": "cogs.invc",
        "documentation": {}
    },
    {
        "label": "disableview",
        "kind": 6,
        "importPath": "cogs.invc",
        "description": "cogs.invc",
        "peekOfCode": "class disableview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, role: discord.Role=None):\n        super().__init__()\n        self.add_item(disablemenu(ctx, role))\n        self.ctx = ctx\n        self.role = role\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.invc",
        "documentation": {}
    },
    {
        "label": "invc",
        "kind": 6,
        "importPath": "cogs.invc",
        "description": "cogs.invc",
        "peekOfCode": "class invc(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        name=\"invc\",\n        invoke_without_command=True, description=\"Shows the invc's help menu\"\n    )\n    async def invc(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":",
        "detail": "cogs.invc",
        "documentation": {}
    },
    {
        "label": "jail",
        "kind": 6,
        "importPath": "cogs.jail",
        "description": "cogs.jail",
        "peekOfCode": "class jail(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self): \n      async with self.bot.db.cursor() as cursor: \n        await cursor.execute(\"CREATE TABLE IF NOT EXISTS setme (channel_id INTEGER, role_id INTEGER, guild_id INTEGER)\") \n        await cursor.execute(\"CREATE TABLE IF NOT EXISTS jail (guild_id INTEGER, user_id INTEGER, roles TEXT)\") \n      await self.bot.db.commit()  \n    @commands.Cog.listener()",
        "detail": "cogs.jail",
        "documentation": {}
    },
    {
        "label": "joindm",
        "kind": 6,
        "importPath": "cogs.joindm",
        "description": "cogs.joindm",
        "peekOfCode": "class joindm(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_ready(self):\n        async with self.bot.db.cursor() as cursor: \n            await cursor.execute(\"CREATE TABLE IF NOT EXISTS joindm (guild_id INTEGER, message TEXT);\") \n        await self.bot.db.commit()\n    @commands.Cog.listener()\n    async def on_member_join(self, member: discord.Member):",
        "detail": "cogs.joindm",
        "documentation": {}
    },
    {
        "label": "enablemenu",
        "kind": 6,
        "importPath": "cogs.logging",
        "description": "cogs.logging",
        "peekOfCode": "class enablemenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, channel: discord.TextChannel):\n        options = []\n        ls = [\"mod\", \"role\", \"message\", \"member\", \"channel\", \"server\"]\n        query = \"SELECT * FROM  'logs' WHERE guild_id = ?\"\n        val = (ctx.guild.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()\n            cursor.execute(query, val)",
        "detail": "cogs.logging",
        "documentation": {}
    },
    {
        "label": "enableview",
        "kind": 6,
        "importPath": "cogs.logging",
        "description": "cogs.logging",
        "peekOfCode": "class enableview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, channel: discord.TextChannel):\n        super().__init__(timeout=60)\n        self.add_item(enablemenu(ctx, channel))\n        self.ctx = ctx\n        self.channel = channel\n    @discord.ui.button(label=\"All Loggings\", style=discord.ButtonStyle.blurple)\n    async def _enable(self, interaction, button):\n        ctx = self.ctx\n        channel = self.channel",
        "detail": "cogs.logging",
        "documentation": {}
    },
    {
        "label": "disablemenu",
        "kind": 6,
        "importPath": "cogs.logging",
        "description": "cogs.logging",
        "peekOfCode": "class disablemenu(discord.ui.Select):\n    def __init__(self, ctx: commands.Context, channel: discord.TextChannel=None):\n        options = []\n        ls = [\"mod\", \"role\", \"message\", \"member\", \"channel\", \"server\"]\n        query = \"SELECT * FROM  'logs' WHERE guild_id = ?\"\n        val = (ctx.guild.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()\n            cursor.execute(query, val)",
        "detail": "cogs.logging",
        "documentation": {}
    },
    {
        "label": "disableview",
        "kind": 6,
        "importPath": "cogs.logging",
        "description": "cogs.logging",
        "peekOfCode": "class disableview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, channel: discord.TextChannel=None):\n        super().__init__(timeout=60)\n        self.add_item(disablemenu(ctx, channel))\n        self.ctx = ctx\n        self.channel = channel\n    @discord.ui.button(label=\"All Loggings\", style=discord.ButtonStyle.blurple)\n    async def _disable(self, interaction, button):\n        ctx = self.ctx\n        channel = self.channel",
        "detail": "cogs.logging",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "importPath": "cogs.logging",
        "description": "cogs.logging",
        "peekOfCode": "class logging(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        name=\"logging\",\n        invoke_without_command=True, description=\"Shows the logging's help menu\"\n    )\n    async def logging(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":",
        "detail": "cogs.logging",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "kind": 6,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "class Paginator(discord.ui.View):\n\tdef __init__(self, embeds: List[discord.Embed]):\n\t\tsuper().__init__(timeout=60)\n\t\tself.embeds = embeds\n\t\tself.current_page = 0\n\t@discord.ui.button(label=\"⬅️\", style=discord.ButtonStyle.blurple, disabled=True)\n\tasync def previous_page(self, button: discord.ui.Button, interaction: discord.Interaction):\n\t\tif self.current_page == 1:\n\t\t\tself.previous_page.disabled = True\n\t\tself.next_page.disabled = False",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "memeS",
        "kind": 6,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "class memeS(commands.Cog):\n\tdef __init__(self, bot):\n\t\tself.bot = bot\n\t\tself.actions = [\n\t\t\t\t'***blushes***',\n\t\t\t\t'***whispers to self***',\n\t\t\t\t'***cries***',\n\t\t\t\t'***screams***',\n\t\t\t\t'***sweats***',\n\t\t\t\t'***twerks***',",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.embeds",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.embeds = embeds\n\t\tself.current_page = 0\n\t@discord.ui.button(label=\"⬅️\", style=discord.ButtonStyle.blurple, disabled=True)\n\tasync def previous_page(self, button: discord.ui.Button, interaction: discord.Interaction):\n\t\tif self.current_page == 1:\n\t\t\tself.previous_page.disabled = True\n\t\tself.next_page.disabled = False\n\t\tself.current_page -= 1\n\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.current_page",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.current_page = 0\n\t@discord.ui.button(label=\"⬅️\", style=discord.ButtonStyle.blurple, disabled=True)\n\tasync def previous_page(self, button: discord.ui.Button, interaction: discord.Interaction):\n\t\tif self.current_page == 1:\n\t\t\tself.previous_page.disabled = True\n\t\tself.next_page.disabled = False\n\t\tself.current_page -= 1\n\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\n\t@discord.ui.button(label=\"➡️\", style=discord.ButtonStyle.blurple, disabled=False)",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.previous_page.disabled",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\t\tself.previous_page.disabled = True\n\t\tself.next_page.disabled = False\n\t\tself.current_page -= 1\n\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\n\t@discord.ui.button(label=\"➡️\", style=discord.ButtonStyle.blurple, disabled=False)\n\tasync def next_page(self, button: discord.ui.Button, interaction: discord.Interaction):\n\t\tself.current_page += 1\n\t\tprint(self.current_page)\n\t\tif self.current_page == len(self.embeds) - 1:",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.next_page.disabled",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.next_page.disabled = False\n\t\tself.current_page -= 1\n\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\n\t@discord.ui.button(label=\"➡️\", style=discord.ButtonStyle.blurple, disabled=False)\n\tasync def next_page(self, button: discord.ui.Button, interaction: discord.Interaction):\n\t\tself.current_page += 1\n\t\tprint(self.current_page)\n\t\tif self.current_page == len(self.embeds) - 1:\n\t\t\tself.next_page.disabled = True",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tembed",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\n\t@discord.ui.button(label=\"➡️\", style=discord.ButtonStyle.blurple, disabled=False)\n\tasync def next_page(self, button: discord.ui.Button, interaction: discord.Interaction):\n\t\tself.current_page += 1\n\t\tprint(self.current_page)\n\t\tif self.current_page == len(self.embeds) - 1:\n\t\t\tself.next_page.disabled = True\n\t\tself.previous_page.disabled = False\n\t\tembed = self.embeds[self.current_page]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.next_page.disabled",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\t\tself.next_page.disabled = True\n\t\tself.previous_page.disabled = False\n\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\nclass memeS(commands.Cog):\n\tdef __init__(self, bot):\n\t\tself.bot = bot\n\t\tself.actions = [\n\t\t\t\t'***blushes***',\n\t\t\t\t'***whispers to self***',",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.previous_page.disabled",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.previous_page.disabled = False\n\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\nclass memeS(commands.Cog):\n\tdef __init__(self, bot):\n\t\tself.bot = bot\n\t\tself.actions = [\n\t\t\t\t'***blushes***',\n\t\t\t\t'***whispers to self***',\n\t\t\t\t'***cries***',",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tembed",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tembed = self.embeds[self.current_page]\n\t\tawait interaction.response.edit_message(embed=embed, view=self)\nclass memeS(commands.Cog):\n\tdef __init__(self, bot):\n\t\tself.bot = bot\n\t\tself.actions = [\n\t\t\t\t'***blushes***',\n\t\t\t\t'***whispers to self***',\n\t\t\t\t'***cries***',\n\t\t\t\t'***screams***',",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.bot",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.bot = bot\n\t\tself.actions = [\n\t\t\t\t'***blushes***',\n\t\t\t\t'***whispers to self***',\n\t\t\t\t'***cries***',\n\t\t\t\t'***screams***',\n\t\t\t\t'***sweats***',\n\t\t\t\t'***twerks***',\n\t\t\t\t'***runs away***',\n\t\t\t\t'***screeches***',",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.actions",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.actions = [\n\t\t\t\t'***blushes***',\n\t\t\t\t'***whispers to self***',\n\t\t\t\t'***cries***',\n\t\t\t\t'***screams***',\n\t\t\t\t'***sweats***',\n\t\t\t\t'***twerks***',\n\t\t\t\t'***runs away***',\n\t\t\t\t'***screeches***',\n\t\t\t\t'***walks away***',",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tself.faces",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tself.faces = [\n\t\t\t\"(・\\`ω\\´・)\",\n\t\t\t\";;w;;\",\n\t\t\t\"OwO\",\n\t\t\t\"owo\",\n\t\t\t\"UwU\",\n\t\t\t\"\\>w\\<\",\n\t\t\t\"^w^\",\n\t\t\t\"ÚwÚ\",\n\t\t\t\"^-^\",",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tusage",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tusage = \"Send_message\",\n\t\tdescription = \"Finds and returns a random subreddit memes\",\n\t\tbrief = \"None\",\n\t\thelp = \"```Example: meme```\"\n\t)\n\tasync def meme(self, ctx):\n\t\tr = httpx.get(\"https://meme-api.herokuapp.com/gimme\")\n\t\tres = r.json()\n\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tdescription",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tdescription = \"Finds and returns a random subreddit memes\",\n\t\tbrief = \"None\",\n\t\thelp = \"```Example: meme```\"\n\t)\n\tasync def meme(self, ctx):\n\t\tr = httpx.get(\"https://meme-api.herokuapp.com/gimme\")\n\t\tres = r.json()\n\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tbrief",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tbrief = \"None\",\n\t\thelp = \"```Example: meme```\"\n\t)\n\tasync def meme(self, ctx):\n\t\tr = httpx.get(\"https://meme-api.herokuapp.com/gimme\")\n\t\tres = r.json()\n\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\thelp",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\thelp = \"```Example: meme```\"\n\t)\n\tasync def meme(self, ctx):\n\t\tr = httpx.get(\"https://meme-api.herokuapp.com/gimme\")\n\t\tres = r.json()\n\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tr = httpx.get(\"https://meme-api.herokuapp.com/gimme\")\n\t\tres = r.json()\n\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tres",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tres = r.json()\n\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\ttitle",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\ttitle = res[\"title\"]\n\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tups",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tups = res[\"ups\"]\n\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tauthor",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tauthor = res[\"author\"]\n\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tspoiler",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tspoiler = res[\"spoiler\"]\n\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tnsfw",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tnsfw = res[\"nsfw\"]\n\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)\n\t@commands.command(hidden=True)",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tsubreddit",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tsubreddit = res[\"subreddit\"]\n\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)\n\t@commands.command(hidden=True)\n\tasync def pagination(self, ctx: discord.ext.commands.Context):",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\turl = res[\"url\"]\n\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)\n\t@commands.command(hidden=True)\n\tasync def pagination(self, ctx: discord.ext.commands.Context):\n\t\tembeds = [",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\timg",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\timg = res[\"url\"]\n\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)\n\t@commands.command(hidden=True)\n\tasync def pagination(self, ctx: discord.ext.commands.Context):\n\t\tembeds = [\n\t\t\tdiscord.Embed(",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tpostlink",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tpostlink = res[\"postLink\"]\n\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)\n\t@commands.command(hidden=True)\n\tasync def pagination(self, ctx: discord.ext.commands.Context):\n\t\tembeds = [\n\t\t\tdiscord.Embed(\n\t\t\t\tdescription=\"This is page 1\"",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tem",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tem = discord.Embed(title=f\"{title}\", description=f\"Subreddit: **{subreddit}**\\n Author: **{author}**\", url=postlink)\n\t\tem.set_image(url=img)\n\t\tem.set_footer(text=f\"👍 {ups}| 💬 0 | Spoiler: {spoiler} | NSFW: {nsfw}\")\n\t\treturn await ctx.send(embed=em)\n\t@commands.command(hidden=True)\n\tasync def pagination(self, ctx: discord.ext.commands.Context):\n\t\tembeds = [\n\t\t\tdiscord.Embed(\n\t\t\t\tdescription=\"This is page 1\"\n\t\t\t),",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tembeds",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tembeds = [\n\t\t\tdiscord.Embed(\n\t\t\t\tdescription=\"This is page 1\"\n\t\t\t),\n\t\t\tdiscord.Embed(\n\t\t\t\tdescription=\"This is page 2\"\n\t\t\t),\n\t\t\tdiscord.Embed(\n\t\t\t\tdescription=\"This is page 3\"\n\t\t\t),",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t@commands.command(aliases",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t@commands.command(aliases = ['uwuify', 'uwulock', 'uwu'])\n\tasync def uwufy(self, ctx, *, message=None):\n\t\tif message == None:\n\t\t\tmessage = 'UwU'\n\t\tif \"r\" in message:\n\t\t\tmessage = message.replace(\"r\", \"w\")\n\t\tif \"l\" in message:\n\t\t\tmessage = message.replace(\"l\", \"w\")\n\t\tmessage = [f\"{message}\",\n\t\tf\"**{message}**\",",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\t\tmessage",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\t\tmessage = 'UwU'\n\t\tif \"r\" in message:\n\t\t\tmessage = message.replace(\"r\", \"w\")\n\t\tif \"l\" in message:\n\t\t\tmessage = message.replace(\"l\", \"w\")\n\t\tmessage = [f\"{message}\",\n\t\tf\"**{message}**\",\n\t\tf\"***{message}***\",\n\t\tf\"**{random.choice(self.faces)}** *{message}*\",\n\t\tf\"*{random.choice(self.faces)}* {random.choice(self.actions)}\",",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\t\tmessage",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\t\tmessage = message.replace(\"r\", \"w\")\n\t\tif \"l\" in message:\n\t\t\tmessage = message.replace(\"l\", \"w\")\n\t\tmessage = [f\"{message}\",\n\t\tf\"**{message}**\",\n\t\tf\"***{message}***\",\n\t\tf\"**{random.choice(self.faces)}** *{message}*\",\n\t\tf\"*{random.choice(self.faces)}* {random.choice(self.actions)}\",\n\t\tf\"*{random.choice(self.faces)}* {message} ***{random.choice(self.actions)}***\"\n\t\tf\"**{random.choice(self.actions)}** {random.choice(self.actions)}\",",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\t\tmessage",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\t\tmessage = message.replace(\"l\", \"w\")\n\t\tmessage = [f\"{message}\",\n\t\tf\"**{message}**\",\n\t\tf\"***{message}***\",\n\t\tf\"**{random.choice(self.faces)}** *{message}*\",\n\t\tf\"*{random.choice(self.faces)}* {random.choice(self.actions)}\",\n\t\tf\"*{random.choice(self.faces)}* {message} ***{random.choice(self.actions)}***\"\n\t\tf\"**{random.choice(self.actions)}** {random.choice(self.actions)}\",\n\t\tf\"*{message}* {random.choice(self.actions)}\",\n\t\tf\"{message} *{random.choice(self.actions)}**\"]",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "\t\tmessage",
        "kind": 5,
        "importPath": "cogs.memes",
        "description": "cogs.memes",
        "peekOfCode": "\t\tmessage = [f\"{message}\",\n\t\tf\"**{message}**\",\n\t\tf\"***{message}***\",\n\t\tf\"**{random.choice(self.faces)}** *{message}*\",\n\t\tf\"*{random.choice(self.faces)}* {random.choice(self.actions)}\",\n\t\tf\"*{random.choice(self.faces)}* {message} ***{random.choice(self.actions)}***\"\n\t\tf\"**{random.choice(self.actions)}** {random.choice(self.actions)}\",\n\t\tf\"*{message}* {random.choice(self.actions)}\",\n\t\tf\"{message} *{random.choice(self.actions)}**\"]\n\t\treturn await ctx.send(random.choice(message))",
        "detail": "cogs.memes",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 933738517845118976]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass channeldropdownmenu(discord.ui.ChannelSelect):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "channeldropdownmenu",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class channeldropdownmenu(discord.ui.ChannelSelect):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(placeholder=\"Select channel\",\n            min_values=1,\n            max_values=1,\n            channel_types=[discord.ChannelType.text]\n        )\n        self.ctx = ctx\n    async def callback(self, interaction: discord.Interaction):\n        await interaction.response.defer(ephemeral=False, thinking=False)",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "channelmenuview",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class channelmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.value = None\n        self.add_item(channeldropdownmenu(self.ctx))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 933738517845118976]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "embedSend",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class embedSend(discord.ui.View):\n    def __init__(self, bot, ctx: commands.Context, id):\n        super().__init__()\n        self.add_item(embedMenu(bot, ctx, id))\n        self.bot = bot\n        self.ctx = ctx\n        self.id = id\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 933738517845118976]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "xddd",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class xddd(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"All\", style=discord.ButtonStyle.gray)\n    async def a(self, interaction, button):\n        self.value = 'all'\n        self.stop()\n    @discord.ui.button(label=\"Server update\", style=discord.ButtonStyle.gray)\n    async def server(self, interaction, button):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "channeloption",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class channeloption(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Text\", style=discord.ButtonStyle.gray)\n    async def a(self, interaction, button):\n        self.value = 'text'\n        self.stop()\n    @discord.ui.button(label=\"Voice\", style=discord.ButtonStyle.gray)\n    async def server(self, interaction, button):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "nice",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class nice(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=120)\n        self.value = None\n    @discord.ui.button(label=\"1\", style=discord.ButtonStyle.gray)\n    async def _one(self, interaction, button):\n        self.value = 1\n        self.stop()\n    @discord.ui.button(label=\"10\", style=discord.ButtonStyle.gray)\n    async def _two(self, interaction, button):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "OnOrOff",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class OnOrOff(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(emoji=\"<:confirm:1156150922200748053> \", custom_id='Yes', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        self.value = 'Yes'\n        self.stop()\n    @discord.ui.button(emoji=\"<:cross:1156150663802265670> \", custom_id='No', style=discord.ButtonStyle.danger)\n    async def truth(self, interaction, button):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class create(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=120)\n        self.value = None\n    @discord.ui.button(label=\"Users only\", custom_id='users', style=discord.ButtonStyle.green)\n    async def users(self, interaction, button):\n        self.value = 'users'\n        self.stop()\n    @discord.ui.button(label=\"Bots Only\", custom_id='bots', style=discord.ButtonStyle.green)\n    async def bots(self, interaction, button):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "night",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class night(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=120)\n        self.value = None\n    @discord.ui.button(label=\"Simple Roles Only\", custom_id='simple', style=discord.ButtonStyle.green)\n    async def simple(self, interaction, button):\n        self.value = 'simple'\n        self.stop()\n    @discord.ui.button(label=\"Bot Roles Only\", custom_id='bot', style=discord.ButtonStyle.green)\n    async def bot(self, interaction, button):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "moderation",
        "kind": 6,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "class moderation(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.bot.sniped_messages = {}\n        self.bot.role_status = {}\n        self.bot.rrole_status = {}\n        self.color = 0xc283fe\n    @commands.Cog.listener()\n    async def on_command_completion(self, ctx):\n        em = discord.Embed(title=f\"Command runned in {ctx.guild.name}\", description=f\"Command name: `{ctx.command.qualified_name}`\\nAuthor Name: {str(ctx.author)}\\nGuild Id: {ctx.guild.id}\\nCommand executed: `{ctx.message.content}`\\nChannel name: {ctx.channel.name}\\nChannel Id: {ctx.channel.id}\\nJump Url: [Jump to]({ctx.message.jump_url})\\nCommand runned without error: True\", timestamp=ctx.message.created_at, color=0xc283fe)",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "def convert(date):\n    date.replace(\"second\", \"s\")\n    date.replace(\"seconds\", \"s\")\n    date.replace(\"minute\", \"m\")\n    date.replace(\"minutes\", \"m\")\n    date.replace(\"hour\", \"h\")\n    date.replace(\"hours\", \"h\")\n    date.replace(\"day\", \"d\")\n    date.replace(\"days\", \"d\")\n    pos = [\"s\", \"m\", \"h\", \"d\"]",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "xd",
        "kind": 5,
        "importPath": "cogs.moderation",
        "description": "cogs.moderation",
        "peekOfCode": "xd = {}\nasync def getchannel(guild_id):\n    if guild_id not in xd:\n        return 0\n    else:\n        return xd[guild_id]\nasync def updatechannel(guild_id, channel_id):\n    xd[guild_id] = channel_id\n    return True\nasync def delchannel(guild_id):",
        "detail": "cogs.moderation",
        "documentation": {}
    },
    {
        "label": "noprefix",
        "kind": 6,
        "importPath": "cogs.noprefix",
        "description": "cogs.noprefix",
        "peekOfCode": "class noprefix(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.color = 0xc283fe\n    @commands.command(aliases=['snp'])\n    async def statusnopre(self, ctx, *, user: discord.User = None):\n        ls = workowner\n        if ctx.author.id not in ls and ctx.author.id not in self.bot.owner_ids:\n            return\n        if user is None:",
        "detail": "cogs.noprefix",
        "documentation": {}
    },
    {
        "label": "owner",
        "kind": 6,
        "importPath": "cogs.owner",
        "description": "cogs.owner",
        "peekOfCode": "class owner(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    #@commands.group(invoke_without_command=True)\n    #@commands.is_owner()\n    async def title(self, ctx):\n        pass\n    #@title.command(name=\"give\", aliases=[\"a\"], description=\"Gives the title to user\")\n    #@commands.is_owner()\n    async def title_give(self, ctx, member: discord.User, *, title):",
        "detail": "cogs.owner",
        "documentation": {}
    },
    {
        "label": "premium",
        "kind": 6,
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "peekOfCode": "class premium(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @tasks.loop(minutes=1)\n    async def check_prem(self):\n        query = \"SELECT * FROM  main\"\n        with sqlite3.connect('premium.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()\n            cursor.execute(query)",
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "cogs.premium",
        "description": "cogs.premium",
        "peekOfCode": "def convert(date):\n    date.replace(\"day\", \"d\")\n    date.replace(\"days\", \"d\")\n    date.replace(\"month\", \"m\")\n    date.replace(\"months\", \"m\")\n    date.replace(\"year\", \"y\")\n    date.replace(\"years\", \"y\")\n    pos = [\"d\", \"m\", \"y\"]\n    time_dic = {\"d\": 3600 *24, \"m\": 3600 * 24* 30, \"y\": 3600 * 24 * 365}\n    unit = date[-1]",
        "detail": "cogs.premium",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.raidmode",
        "description": "cogs.raidmode",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass config(BasicView):",
        "detail": "cogs.raidmode",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "importPath": "cogs.raidmode",
        "description": "cogs.raidmode",
        "peekOfCode": "class config(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Default\", style=discord.ButtonStyle.gray)\n    async def a(self, interaction, button):\n        self.value = 'def'\n        self.stop()\n    @discord.ui.button(label=\"Customize\", style=discord.ButtonStyle.gray)\n    async def server(self, interaction, button):",
        "detail": "cogs.raidmode",
        "documentation": {}
    },
    {
        "label": "xddd",
        "kind": 6,
        "importPath": "cogs.raidmode",
        "description": "cogs.raidmode",
        "peekOfCode": "class xddd(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Ban\", style=discord.ButtonStyle.red)\n    async def _b(self, interaction, button):\n        self.value = 'ban'\n        self.stop()\n    @discord.ui.button(label=\"Kick\", style=discord.ButtonStyle.green)\n    async def _k(self, interaction, button):",
        "detail": "cogs.raidmode",
        "documentation": {}
    },
    {
        "label": "lockconfig",
        "kind": 6,
        "importPath": "cogs.raidmode",
        "description": "cogs.raidmode",
        "peekOfCode": "class lockconfig(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Enable\", style=discord.ButtonStyle.red)\n    async def _b(self, interaction, button):\n        self.value = 1\n        self.stop()\n    @discord.ui.button(label=\"Disable\", style=discord.ButtonStyle.green)\n    async def _k(self, interaction, button):",
        "detail": "cogs.raidmode",
        "documentation": {}
    },
    {
        "label": "raidmode",
        "kind": 6,
        "importPath": "cogs.raidmode",
        "description": "cogs.raidmode",
        "peekOfCode": "class raidmode(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_member_join(self, user):\n        query = \"SELECT * FROM  raidmode WHERE guild_id = ?\"\n        val = (user.guild.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n            db.row_factory = sqlite3.Row\n            cursor = db.cursor()",
        "detail": "cogs.raidmode",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass embedm_edit(BasicView):",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "embedm_edit",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class embedm_edit(BasicView):\n    def __init__(self, bot, ctx: commands.Context, id):\n        super().__init__(ctx, timeout=120)\n        self.add_item(embedMenu(bot, ctx, id))\n        self.value = None\n    @discord.ui.button(label=\"Done\", style=discord.ButtonStyle.green)\n    async def _send(self, interaction: discord.Interaction, button):\n        self.stop()\nclass OnOrOff(BasicView):\n    def __init__(self, ctx: commands.Context):",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "OnOrOff",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class OnOrOff(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Same\", custom_id='Yes', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = 'same'\n        self.stop()\n    @discord.ui.button(label=\"Custom\", custom_id='No', style=discord.ButtonStyle.danger)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "SelectRoleButton",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class SelectRoleButton(discord.ui.Select):\n    def __init__(self, place, max, stuff: list, reqrole):\n        options = []\n        for x in stuff:\n            options.append(discord.SelectOption(label=x[\"label\"], emoji=x[\"emo\"], description=x[\"des\"], value=x[\"role\"]))\n        super().__init__(placeholder=place, min_values=1, max_values=max, options=options, custom_id='selfrole-dropdown')\n        self.reqrole = reqrole\n    async def callback(self, interaction: discord.Interaction):\n        if self.reqrole is not None:\n            rr = discord.utils.get(interaction.guild.roles, id=self.reqrole)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "DropdownSelfRoleView",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class DropdownSelfRoleView(discord.ui.View):\n    def __init__(self, place, max, stuff: list, reqrole):\n        super().__init__(timeout=None)\n        self.add_item(SelectRoleButton(place, max, stuff, reqrole))\nclass SelfRoleButton(discord.ui.Button):\n    def __init__(self, b_type, label, emoji, role_id: int, reqrole):\n        if b_type == \"p\":\n            t = discord.ButtonStyle.blurple\n        elif b_type == \"p2\":\n            t = discord.ButtonStyle.green",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "SelfRoleButton",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class SelfRoleButton(discord.ui.Button):\n    def __init__(self, b_type, label, emoji, role_id: int, reqrole):\n        if b_type == \"p\":\n            t = discord.ButtonStyle.blurple\n        elif b_type == \"p2\":\n            t = discord.ButtonStyle.green\n        elif b_type == \"secondary\":\n            t = discord.ButtonStyle.secondary\n        else:\n            t = discord.ButtonStyle.danger",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "ButtonSelfRoleView",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class ButtonSelfRoleView(discord.ui.View):\n    def __init__(self, stuff: list):\n        super().__init__(timeout=None)\n        for x in stuff:\n            button = SelfRoleButton(x['b_type'], x['label'], x['emo'], x['role'], x['reqrole'])\n            self.add_item(button)\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass ButtonOrDropdown(BasicView):",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "ButtonOrDropdown",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class ButtonOrDropdown(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Button\", custom_id='button', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = 'button'\n        self.stop()\n    @discord.ui.button(label=\"DropDown\", custom_id='dropdown', style=discord.ButtonStyle.blurple)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "embormsg",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class embormsg(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Embed\", custom_id='emb', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = True\n        self.stop()\n    @discord.ui.button(label=\"Simple\", custom_id='msg', style=discord.ButtonStyle.blurple)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "choosebutton",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class choosebutton(BasicView):\n    def __init__(self, ctx: commands.Context, x):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n        if x == 0:\n            self.remove_item(self.done)\n    @discord.ui.button(label=\"Primary\", custom_id='b1', style=discord.ButtonStyle.blurple)\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = 'p'",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "chooselabeloremoji",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class chooselabeloremoji(BasicView):\n    def __init__(self, ctx: commands.Context, x, xx=None):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n        if xx is not None:\n            self.remove_item(self.truthh)\n        if not x:\n            self.remove_item(self.done)\n    @discord.ui.button(style=discord.ButtonStyle.green, label=\"Label & Emoji\", emoji=\"<:Gateway_trans:1097074266165489674>\", custom_id=\"L&E\")\n    async def dare(self, interaction, button):",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "customordefault",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class customordefault(BasicView):\n    def __init__(self, bot, ctx: commands.Context, x):\n        super().__init__(ctx, timeout=None)\n        self.value = None\n        self.ctx = ctx\n        self.x = x\n        self.bot = bot\n    @discord.ui.button(style=discord.ButtonStyle.green, label=\"Default\", custom_id=\"NAME\")\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "placeholdm",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class placeholdm(discord.ui.Modal, title=\"Custom Placeholder\"):\n    emb = discord.ui.TextInput(\n        label=\"What Should be The custom placeholder?\",\n        style=discord.TextStyle.short,\n        placeholder='Type the placeholder here',\n        max_length=100,\n        required=True,\n    )\n    async def on_submit(self, interaction: discord.Interaction):\n        await interaction.response.send_message('Custom placeholder set', ephemeral=True)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "placehold",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class placehold(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(style=discord.ButtonStyle.green, label=\"Default\", custom_id=\"NAME\")\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = 'Select the roles from the dropdown'\n        self.stop()\n    @discord.ui.button(style=discord.ButtonStyle.blurple, label=\"Custom Placeholder\", custom_id=\"CUSTOM\")",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "dex",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class dex(discord.ui.Modal, title=\"Custom Description\"):\n    emb = discord.ui.TextInput(\n        label=\"What Should be The custom description?\",\n        style=discord.TextStyle.short,\n        placeholder='Type {name} for role name',\n        max_length=100,\n        required=True,\n    )\n    async def on_submit(self, interaction: discord.Interaction):\n        await interaction.response.send_message('Custom Description set', ephemeral=True)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "desornone",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class desornone(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(style=discord.ButtonStyle.danger, label=\"None\", custom_id=\"NAME\")\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = None\n        self.stop()\n    @discord.ui.button(style=discord.ButtonStyle.blurple, label=\"Custom Description\", custom_id=\"CUSTOM\")",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "embmsg",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class embmsg(discord.ui.Modal, title=\"Custom label\"):\n    emb = discord.ui.TextInput(\n        label=\"What Should be The custom label?\",\n        style=discord.TextStyle.short,\n        placeholder='Type {name} for role name',\n        max_length=80,\n        required=True,\n    )\n    async def on_submit(self, interaction: discord.Interaction):\n        await interaction.response.send_message('Custom label set', ephemeral=True)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class label(BasicView):\n    def __init__(self, ctx: commands.Context, x):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n        if not x:\n            self.remove_item(self.done)\n    @discord.ui.button(style=discord.ButtonStyle.blurple, label=\"Role name\", custom_id=\"NAME\")\n    async def dare(self, interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = '{name}'",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "xddd",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class xddd(BasicView):\n    def __init__(self, ctx: commands.Context, c):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n        if c == 0:\n            self.done.disabled = True\n    @discord.ui.button(style=discord.ButtonStyle.green, label=\"Done\", custom_id=\"done\")\n    async def done(self, interaction: discord.Interaction, button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        self.value = \"done\"",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "roledropdownmenu",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class roledropdownmenu(discord.ui.RoleSelect):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(placeholder=\"Select the role\",\n            min_values=1,\n            max_values=1,\n        )\n        self.ctx = ctx\n    async def callback(self, interaction: discord.Interaction):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        await updaterole(self.ctx.guild.id, self.values[0].id)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "rolemenuview",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class rolemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.add_item(roledropdownmenu(self.ctx))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "requiredrole",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class requiredrole(discord.ui.View):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.add_item(roledropdownmenu(self.ctx))\n        self.value = None\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "channeldropdownmenu",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class channeldropdownmenu(discord.ui.ChannelSelect):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(placeholder=\"Select channel for selfrole panel\",\n            min_values=1,\n            max_values=1,\n            channel_types=[discord.ChannelType.text]\n        )\n        self.ctx = ctx\n    async def callback(self, interaction: discord.Interaction):\n        await interaction.response.defer(ephemeral=False, thinking=False)",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "channelmenuview",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class channelmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.value = None\n        self.add_item(channeldropdownmenu(self.ctx))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "selfroles",
        "kind": 6,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "class selfroles(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(invoke_without_command=True, name=\"selfrole\", aliases=['selfroles', 'reactionrole', 'sr', 'rr'], description=\"Show's the help menu for selfroles\")\n    async def selfrole(self, ctx: commands.Context):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"\n        anay = discord.utils.get(self.bot.users, id=978930369392951366)\n        ls = [\"selfroles\", \"selfroles create\", \"selfroles delete\", \"selfroles list\"]",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "xd",
        "kind": 5,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "xd = {}\nasync def getchannel(guild_id):\n    if guild_id not in xd:\n        return 0\n    else:\n        return xd[guild_id]\nasync def updatechannel(guild_id, channel_id):\n    xd[guild_id] = channel_id\n    return True\nasync def delchannel(guild_id):",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "xdd",
        "kind": 5,
        "importPath": "cogs.selfroles",
        "description": "cogs.selfroles",
        "peekOfCode": "xdd = {}\nasync def getrole(guild_id):\n    if guild_id not in xdd:\n        return 0\n    else:\n        return xdd[guild_id]\nasync def updaterole(guild_id, role_id):\n    xdd[guild_id] = role_id\n    return True\nasync def delrole(guild_id):",
        "detail": "cogs.selfroles",
        "documentation": {}
    },
    {
        "label": "Shubham",
        "kind": 6,
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "peekOfCode": "class Shubham(commands.Cog):\n    def __init__(self, bot: commands.AutoShardedBot):\n        self.bot = bot\nasync def setup(bot):\n    await bot.add_cog(Shubham(bot))",
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "seconds_to_dhms",
        "kind": 2,
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "peekOfCode": "def seconds_to_dhms(time):\n    seconds_to_minute   = 60\n    seconds_to_hour     = 60 * seconds_to_minute\n    seconds_to_day      = 24 * seconds_to_hour\n    days    =   time // seconds_to_day\n    time    %=  seconds_to_day\n    hours   =   time // seconds_to_hour\n    time    %=  seconds_to_hour\n    minutes =   time // seconds_to_minute\n    time    %=  seconds_to_minute",
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "blacklist",
        "kind": 2,
        "importPath": "cogs.shubham",
        "description": "cogs.shubham",
        "peekOfCode": "def blacklist(): \n        async def predicate(ctx): \n            if ctx.guild is None:\n             return False\n            async with ctx.bot.db.cursor() as cursor:\n                await cursor.execute(\"SELECT * FROM nodata WHERE user = {}\".format(ctx.author.id))\n                check = await cursor.fetchone()\n                if check is not None: \n                   await ctx.reply(embed=discord.Embed(color=Colors.red, description=f\"{Emojis.warning} {ctx.author.mention}: ur blacklisted by Nova, bitchboy. :nerd:\"), mention_author=False)\n                return check is None",
        "detail": "cogs.shubham",
        "documentation": {}
    },
    {
        "label": "spotify",
        "kind": 6,
        "importPath": "cogs.spotify",
        "description": "cogs.spotify",
        "peekOfCode": "class spotify(commands.Cog):\n    def __init__(self, bot: commands.AutoShardedBot):\n        self.bot = bot   \n    @commands.command(aliases = ['spotify', \"sp\"])\n    @commands.cooldown(1, 3, commands.BucketType.user)\n    async def spotifytrack(self, ctx, user: discord.Member = None):\n        user = user or ctx.author\n        spotify_result = next((activity for activity in user.activities if isinstance(activity, discord.Spotify)), None)\n        if user == ctx.author:\n                if spotify_result is None:",
        "detail": "cogs.spotify",
        "documentation": {}
    },
    {
        "label": "tickredel",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class tickredel(discord.ui.View):\n    def __init__(self, bot):\n        super().__init__(timeout=None)\n        self.bot = bot\n    @discord.ui.button(label=\"Reopen\", emoji=\"🔓\", custom_id=\"open\", style=discord.ButtonStyle.green)\n    async def _treopen(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        guild = interaction.guild\n        srole = await getsupportrole(guild)\n        user = await getuser(guild, interaction.channel)",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "ticketchannelpanel",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class ticketchannelpanel(discord.ui.View):\n    def __init__(self, bot):\n        super().__init__(timeout=None)\n        self.bot = bot\n    @discord.ui.button(label=\"Close\", emoji=\"<:ticket_close:1041629937951588352>\", custom_id=\"close\", style=discord.ButtonStyle.red)\n    async def _ticketchannel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        guild = interaction.guild\n        srole = await getsupportrole(guild)\n        user = await getuser(guild, interaction.channel)",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "ticketpanel",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class ticketpanel(discord.ui.View):\n    def __init__(self, bot):\n        super().__init__(timeout=None)\n        self.bot = bot\n    async def interaction_check(self, interaction: discord.Interaction):\n        c = await checkuser(interaction.guild, interaction.user)\n        if c is False:\n            return True\n        else:\n            c = discord.utils.get(interaction.guild.channels, id=c)",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "roledropdownmenu",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class roledropdownmenu(discord.ui.RoleSelect):\n    def __init__(self, ctx: commands.Context, opt: str, place:str):\n        super().__init__(placeholder=place,\n            min_values=1,\n            max_values=1,\n        )\n        self.ctx = ctx\n        self.opt = opt\n    async def callback(self, interaction: discord.Interaction):\n        await interaction.response.defer(ephemeral=False, thinking=False)",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "rolemenuview",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class rolemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: str, place: str):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.add_item(roledropdownmenu(self.ctx, opt, place))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "channeldropdownmenu",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class channeldropdownmenu(discord.ui.ChannelSelect):\n    def __init__(self, ctx: commands.Context, opt: str, place:str):\n        super().__init__(placeholder=place,\n            min_values=1,\n            max_values=1,\n            channel_types=[discord.ChannelType.text]\n        )\n        self.ctx = ctx\n        self.opt = opt\n    async def callback(self, interaction: discord.Interaction):",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "channelmenuview",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class channelmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: str, place: str):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.add_item(channeldropdownmenu(self.ctx, opt, place))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "catdropdownmenu",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class catdropdownmenu(discord.ui.ChannelSelect):\n    def __init__(self, ctx: commands.Context, opt: str, place:str):\n        super().__init__(placeholder=place,\n            min_values=1,\n            max_values=1,\n            channel_types=[discord.ChannelType.category]\n        )\n        self.ctx = ctx\n        self.opt = opt\n    async def callback(self, interaction: discord.Interaction):",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "catmenuview",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class catmenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context, opt: str, place: str):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.add_item(catdropdownmenu(self.ctx, opt, place))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "embmsg",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class embmsg(discord.ui.Modal, title=\"Embed Message\"):\n    emb = discord.ui.TextInput(\n        label='What Should be The Embed Message?',\n        style=discord.TextStyle.long,\n        placeholder='Type your Embed message here...',\n        required=False,\n    )\n    async def on_submit(self, interaction: discord.Interaction):\n        des = self.emb.value + \"\\nTo create a ticket interact with the button below 📩\"\n        query = \"SELECT * FROM  panel WHERE guild_id = ?\"",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "editpanelview",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class editpanelview(discord.ui.View):\n    def __init__(self, bot: commands.Bot, ctx: commands.Context, name):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.bot = bot\n        self.name = name\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "panelview",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class panelview(discord.ui.View):\n    def __init__(self, bot: commands.Bot, ctx: commands.Context, name):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.bot = bot\n        self.name = name\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "ticket",
        "kind": 6,
        "importPath": "cogs.ticket",
        "description": "cogs.ticket",
        "peekOfCode": "class ticket(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        invoke_without_command=True, description=\"Shows the help menu for ticket commands\"\n    )\n    async def ticket(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"",
        "detail": "cogs.ticket",
        "documentation": {}
    },
    {
        "label": "voice",
        "kind": 6,
        "importPath": "cogs.voice",
        "description": "cogs.voice",
        "peekOfCode": "class voice(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        invoke_without_command=True, aliases=[\"vc\"], description=\"Shows the help menu for voice commands\"\n    )\n    async def voice(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"",
        "detail": "cogs.voice",
        "documentation": {}
    },
    {
        "label": "vcModal",
        "kind": 6,
        "importPath": "cogs.voicemaster",
        "description": "cogs.voicemaster",
        "peekOfCode": "class vcModal(Modal, title=\"rename your voice channel\"):\n       name = discord.ui.TextInput(\n        label=\"voice channel name\",\n        placeholder=\"give your channel a better name\",\n        required=True,\n        style=discord.TextStyle.short\n       )\n       async def on_submit(self, interaction: discord.Interaction):\n        name = self.name.value\n        try: ",
        "detail": "cogs.voicemaster",
        "documentation": {}
    },
    {
        "label": "vmbuttons",
        "kind": 6,
        "importPath": "cogs.voicemaster",
        "description": "cogs.voicemaster",
        "peekOfCode": "class vmbuttons(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n    @discord.ui.button(label=\"\", emoji=\"<:emoji_4:1230495550005186580>\", style=discord.ButtonStyle.gray, custom_id=\"persistent_view:lock\")    \n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n         async with interaction.client.db.cursor() as cursor: \n          await cursor.execute(\"SELECT * FROM voicemaster WHERE guild_id = {}\".format(interaction.guild.id)) \n          check = await cursor.fetchone()\n          if check is not None:     \n             channeid = check[1]",
        "detail": "cogs.voicemaster",
        "documentation": {}
    },
    {
        "label": "VoiceMaster",
        "kind": 6,
        "importPath": "cogs.voicemaster",
        "description": "cogs.voicemaster",
        "peekOfCode": "class VoiceMaster(commands.Cog): \n   def __init__(self, bot: commands.AutoShardedBot): \n        self.bot = bot \n   @commands.Cog.listener()\n   async def on_ready(self): \n    async with self.bot.db.cursor() as cursor: \n      await cursor.execute(\"CREATE TABLE IF NOT EXISTS voicemaster (guild_id INTEGER, vc INTEGER, interface INTEGER)\")\n      await cursor.execute(\"CREATE TABLE IF NOT EXISTS vcs (user_id INTEGER, voice INTEGER)\") \n    await self.bot.db.commit()        \n   @commands.Cog.listener() ",
        "detail": "cogs.voicemaster",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\nclass HumansOrBots(BasicView):",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "HumansOrBots",
        "kind": 6,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "class HumansOrBots(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None \n    @discord.ui.button(label=\"Humans\", custom_id='humans', style=discord.ButtonStyle.green)\n    async def _human(self, interaction, button):\n        self.value = 'humans'\n        self.stop()\n    @discord.ui.button(label=\"Bots\", custom_id='bots', style=discord.ButtonStyle.green)\n    async def _bot(self, interaction, button):",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "YesOrNo",
        "kind": 6,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "class YesOrNo(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(emoji=\"<:ticky:1154027584020021278>\", custom_id='Yes', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        self.value = 'Yes'\n        self.stop()\n    @discord.ui.button(emoji=\"<:error:1153009680428318791>\", custom_id='No', style=discord.ButtonStyle.danger)\n    async def truth(self, interaction, button):",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "OnOrOff",
        "kind": 6,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "class OnOrOff(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    @discord.ui.button(label=\"Enable\", custom_id='on', style=discord.ButtonStyle.green)\n    async def dare(self, interaction, button):\n        self.value = 'on'\n        self.stop()\n    @discord.ui.button(label=\"Disable\", custom_id='off', style=discord.ButtonStyle.danger)\n    async def truth(self, interaction, button):",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "embedSend",
        "kind": 6,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "class embedSend(discord.ui.View):\n    def __init__(self, bot, ctx: commands.Context, id):\n        super().__init__()\n        self.add_item(embedMenu(bot, ctx, id))\n        self.bot = bot\n        self.ctx = ctx\n        self.id = id\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "welcome",
        "kind": 6,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "class welcome(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.Cog.listener()\n    async def on_member_join(self, user):\n        await self.bot.wait_until_ready()\n        query = \"SELECT * FROM  welcome WHERE guild_id = ?\"\n        val = (user.guild.id,)\n        with sqlite3.connect('./database.sqlite3') as db:\n          db.row_factory = sqlite3.Row",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "cogs.welcome",
        "description": "cogs.welcome",
        "peekOfCode": "def convert(date):\n    date.replace(\"second\", \"s\")\n    date.replace(\"seconds\", \"s\")\n    date.replace(\"minute\", \"m\")\n    date.replace(\"minutes\", \"m\")\n    date.replace(\"hour\", \"h\")\n    date.replace(\"hours\", \"h\")\n    date.replace(\"day\", \"d\")\n    date.replace(\"days\", \"d\")\n    pos = [\"s\", \"m\", \"h\", \"d\"]",
        "detail": "cogs.welcome",
        "documentation": {}
    },
    {
        "label": "Reactions",
        "kind": 6,
        "importPath": "events.reactions",
        "description": "events.reactions",
        "peekOfCode": "class Reactions(commands.Cog): \n  def __init__(self, bot: commands.AutoShardedBot): \n   self.bot = bot \n  @commands.Cog.listener('on_raw_reaction_add')\n  async def starboard_add(self, payload: discord.RawReactionActionEvent):\n     try:   \n       check = await self.self.bot.pg_conn.fetchrow(\"SELECT * FROM starboard WHERE guild_id = {}\".format(payload.guild_id))\n       if check: \n         if payload.emoji.is_unicode_emoji(): \n          if ord(str(payload.emoji)) != int(check[\"emoji_id\"]): return  ",
        "detail": "events.reactions",
        "documentation": {}
    },
    {
        "label": "Tasks",
        "kind": 6,
        "importPath": "events.tasks",
        "description": "events.tasks",
        "peekOfCode": "class Tasks(commands.Cog): \n    def __init__(self, bot: commands.AutoShardedBot): \n      self.bot = bot \n    @commands.Cog.listener()\n    async def on_ready(self): \n      await self.bot.wait_until_ready()\n      counter_update.start(self.bot)\n      delete.start(self.bot)       \n      autopfp.start(self.bot)\n      discrim_update.start(self.bot)",
        "detail": "events.tasks",
        "documentation": {}
    },
    {
        "label": "PFPS",
        "kind": 6,
        "importPath": "images.pfps",
        "description": "images.pfps",
        "peekOfCode": "class PFPS:\n  females = [\n  \"https://media.discordapp.net/attachments/955106701558833234/1039597504221683744/IMG_8577.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1039597498349662289/IMG_8576.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1039597492544753724/IMG_8575.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1038910777106636810/ee80c362c0586f3bba3db906f5a1fa1e.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1038515516349874290/IMG_8158.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1038515507004969031/IMG_8157.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1038515499069358100/IMG_8156.jpg\",\n  \"https://media.discordapp.net/attachments/955106701558833234/1038270872185741392/fad20ddf2ba5c18ca4c745d73f0df8ce.jpg\",",
        "detail": "images.pfps",
        "documentation": {}
    },
    {
        "label": "owner",
        "kind": 2,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "def owner():\n    async def predicate(ctx: commands.Context):\n        c = await ctx.bot.db.cursor()\n        await c.execute(\"SELECT user_id FROM Owner\")\n        ids_ = await c.fetchall()\n        if ids_ is None:\n            return\n        ids = [int(i[0]) for i in ids_]\n        if ctx.author.id in ids:\n            return True",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 2,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "def time(time):\n    hours, remainder = divmod(time, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    days, hours = divmod(hours, 24)\n    text = ''\n    if days > 0:\n        text += f\"{hours} day{'s' if hours != 1 else ''}, \"\n    if hours > 0:\n        text += f\"{hours} hour{'s' if hours != 1 else ''}, \"\n    if minutes > 0:",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "TimeConvert",
        "kind": 2,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "def TimeConvert(time):\n    pos = [\"s\",\"m\",\"h\",\"d\"]\n    time_dict = {\"s\" : 1, \"m\" : 60, \"h\" : 3600 , \"d\" : 3600*24}\n    unit = time[-1]\n    if unit not in pos:\n        return -1\n    try:\n        val = int(time[:-1])\n    except:\n        return -2",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "color = 0x2C2D31\n#EMOJIS\nTick=\"<:greenTick:1230421239634595860>\"\nCross=\"<:redTick:1230421267514003457>\"\nLoad = \"<:rival_warning:1230421852770271272>\"\n#LINKS\nSupport = \"https://discord.gg/aware\"\nInvite = \"https://discord.com/api/oauth2/authorize?client_id=1106094873951621120&&permissions=8&scope=bot\"\nVote = \"\"",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "Load",
        "kind": 5,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "Load = \"<:rival_warning:1230421852770271272>\"\n#LINKS\nSupport = \"https://discord.gg/aware\"\nInvite = \"https://discord.com/api/oauth2/authorize?client_id=1106094873951621120&&permissions=8&scope=bot\"\nVote = \"\"",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "Support",
        "kind": 5,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "Support = \"https://discord.gg/aware\"\nInvite = \"https://discord.com/api/oauth2/authorize?client_id=1106094873951621120&&permissions=8&scope=bot\"\nVote = \"\"",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "Invite",
        "kind": 5,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "Invite = \"https://discord.com/api/oauth2/authorize?client_id=1106094873951621120&&permissions=8&scope=bot\"\nVote = \"\"",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 5,
        "importPath": "utils.aware",
        "description": "utils.aware",
        "peekOfCode": "Vote = \"\"",
        "detail": "utils.aware",
        "documentation": {}
    },
    {
        "label": "Colors",
        "kind": 6,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "class Colors: \n    \"\"\"Just colors\"\"\"\n    red = 0xffffff\n    green = 0xffffff\n    yellow = 0xffffff\n    gold = 0xb4baf7\n    default = 0x495063\n    rainbow = 0x2f3136\n    spotify = 0xffffff\n    normal = 0xffffff",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Emojis",
        "kind": 6,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "class Emojis:\n    \"\"\"Just emojis\"\"\"\n    check = \"<:greenTick:1230421239634595860>\"\n    wrong = \"<:redTick:1230421267514003457>\"\n    warning = \"<:rival_warning:1230421852770271272>\"\n    spotify_emote = \"<:emoji_15:1231454735215628299>\"\nclass Func:\n def ordinal(num: int):\n   \"\"\"Convert from number to ordinal (10 - 10th)\"\"\" \n   num = str(num) ",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Func",
        "kind": 6,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "class Func:\n def ordinal(num: int):\n   \"\"\"Convert from number to ordinal (10 - 10th)\"\"\" \n   num = str(num) \n   if num in [\"11\", \"12\", \"13\"]:\n       return num + \"th\"\n   if num.endswith(\"1\"):\n      return num + \"st\"\n   elif num.endswith(\"2\"):\n      return num + \"nd\"",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "class Database:\n    def get(self, filename: str = None):\n        with open(f\"{sys.path[0]}/db/{filename}.json\", \"r\") as file:\n            data = json.load(file)\n        file.close()\n        return data\n    def put(self, data, filename: str = None):\n        with open(f\"{sys.path[0]}/db/{filename}.json\", \"w\") as file:\n            json.dump(data, file, indent=4)\n        file.close()",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "read_json",
        "kind": 2,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "def read_json(filename: str):\n    return Database().get(filename)\ndef write_json(data, filename: str):\n    return Database().put(data, filename)\nasync def get_parts(params):\n    params = params.replace(\"{embed}\", \"\")\n    return [p[1:][:-1] for p in params.split(\"$v\")]\nasync def to_object(params):\n    x = {}\n    fields = []",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "write_json",
        "kind": 2,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "def write_json(data, filename: str):\n    return Database().put(data, filename)\nasync def get_parts(params):\n    params = params.replace(\"{embed}\", \"\")\n    return [p[1:][:-1] for p in params.split(\"$v\")]\nasync def to_object(params):\n    x = {}\n    fields = []\n    content = None\n    timestamp=None",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "get_partss",
        "kind": 2,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "def get_partss(params):\n    x = {}\n    notembed, embed = params.split(\"{extra}\")[0].split(\"{embed}\")\n    x[\"notembed\"] = [p[1:][:-1] for p in notembed.split(\"$v\")]\n    x[\"embed\"] = [p[1:][:-1] for p in embed.split(\"$v\")]\n    x[\"extra\"] = [p for p in params.split(\"{extra}\")[1].split()]\n    return x\ndef ordinal(n):\n    return \"%d%s\" % (n, \"tsnrhtdd\"[(n // 10 % 10 != 1) * (n % 10 < 4) * n % 10 :: 4])\nasync def to_objectt(params):",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "kind": 2,
        "importPath": "utils.classes",
        "description": "utils.classes",
        "peekOfCode": "def ordinal(n):\n    return \"%d%s\" % (n, \"tsnrhtdd\"[(n // 10 % 10 != 1) * (n % 10 < 4) * n % 10 :: 4])\nasync def to_objectt(params):\n    x = {}\n    parts = get_partss(params)\n    fields = []\n    content = None\n    files = []\n    view = discord.ui.View()\n    for part in parts[\"notembed\"]:",
        "detail": "utils.classes",
        "documentation": {}
    },
    {
        "label": "get_parts",
        "kind": 2,
        "importPath": "utils.embedparser",
        "description": "utils.embedparser",
        "peekOfCode": "def get_parts(params):\n    params = params.replace(\"{embed}\", \"\")\n    return [p[1:][:-1] for p in params.split(\"$v\")]\nasync def to_object(params):\n    x = {}\n    fields = []\n    content = None\n    timestamp=None\n    files = []\n    view = discord.ui.View()",
        "detail": "utils.embedparser",
        "documentation": {}
    },
    {
        "label": "lockrole",
        "kind": 6,
        "importPath": "utils.lockrole",
        "description": "utils.lockrole",
        "peekOfCode": "class lockrole(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        invoke_without_command=True, description=\"Shows the help menu for lockrole commands\"\n    )\n    async def lockrole(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"",
        "detail": "utils.lockrole",
        "documentation": {}
    },
    {
        "label": "BasicView",
        "kind": 6,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "class BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True\n    async def on_timeout(self) -> None:",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "Choice3",
        "kind": 6,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "class Choice3(BasicView):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(ctx, timeout=60)\n        self.value = None\n    async def on_timeout(self) -> None:\n        try:\n            if self.message:\n                await self.message.edit(view=None)\n        except:\n            pass",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "copyview",
        "kind": 6,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "class copyview(BasicView):\n    def __init__(self, ctx: commands.Context, user: discord.Member):\n        super().__init__(ctx, timeout=None)\n        self.value = None\n        self.user = user\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.user.id:\n            await interaction.response.send_message(f\"Only {str(self.user)} can interact with this message\", ephemeral=True)\n            return False\n        return True",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "interface",
        "kind": 6,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "class interface(discord.ui.View):\n    def __init__(self, bot, ctx: commands.Context):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.bot = bot\n        self.value = None\n        self.vc: wavelink.Player = ctx.voice_client\n    async def interaction_check(self, interaction: discord.Interaction):\n        c = False\n        for i in self.ctx.guild.me.voice.channel.members:",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 6,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "class music(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n    @commands.group(\n        invoke_without_command=True, aliases=['pl'], description=\"Shows the help menu for playlist commands\"\n    )\n    async def playlist(self, ctx):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "updatemsgid",
        "kind": 2,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "def updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]\n    except:\n        d = None\n    return d\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "getmsgid",
        "kind": 2,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "def getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]\n    except:\n        d = None\n    return d\nclass BasicView(discord.ui.View):\n    def __init__(self, ctx: commands.Context, timeout = 60):\n        super().__init__(timeout=timeout)\n        self.ctx = ctx",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "checkplaying",
        "kind": 2,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "def checkplaying(guild_id):\n    query = \"SELECT * FROM  music WHERE guild_id = ?\"\n    val = (guild_id,)\n    with sqlite3.connect('./database.sqlite3') as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        m_db = cursor.fetchone()\n    if m_db is None:\n        return False",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "URL_REG",
        "kind": 5,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "URL_REG = re.compile(r'https?://(?:www\\.)?.+')\nSPOTIFY_URL_REG = re.compile(r'https?://open.spotify.com/(?P<type>album|playlist|track)/(?P<id>[a-zA-Z0-9]+)')\nspotifyyy_client = spotifyyy.Client(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotifyyy_http_client = spotifyyy.http.HTTPClient(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotify_client = spotify.SpotifyClient(client_id=\"9d340e339c10432e9c478742931d64e9\", client_secret=\"2e23b2ab872046eca5fdf3379006f7de\")\nmsg_id = {}\ndef updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "SPOTIFY_URL_REG",
        "kind": 5,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "SPOTIFY_URL_REG = re.compile(r'https?://open.spotify.com/(?P<type>album|playlist|track)/(?P<id>[a-zA-Z0-9]+)')\nspotifyyy_client = spotifyyy.Client(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotifyyy_http_client = spotifyyy.http.HTTPClient(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotify_client = spotify.SpotifyClient(client_id=\"9d340e339c10432e9c478742931d64e9\", client_secret=\"2e23b2ab872046eca5fdf3379006f7de\")\nmsg_id = {}\ndef updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "spotifyyy_client",
        "kind": 5,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "spotifyyy_client = spotifyyy.Client(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotifyyy_http_client = spotifyyy.http.HTTPClient(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotify_client = spotify.SpotifyClient(client_id=\"9d340e339c10432e9c478742931d64e9\", client_secret=\"2e23b2ab872046eca5fdf3379006f7de\")\nmsg_id = {}\ndef updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]\n    except:",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "spotifyyy_http_client",
        "kind": 5,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "spotifyyy_http_client = spotifyyy.http.HTTPClient(\"9d340e339c10432e9c478742931d64e9\", \"2e23b2ab872046eca5fdf3379006f7de\")\nspotify_client = spotify.SpotifyClient(client_id=\"9d340e339c10432e9c478742931d64e9\", client_secret=\"2e23b2ab872046eca5fdf3379006f7de\")\nmsg_id = {}\ndef updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]\n    except:\n        d = None",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "spotify_client",
        "kind": 5,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "spotify_client = spotify.SpotifyClient(client_id=\"9d340e339c10432e9c478742931d64e9\", client_secret=\"2e23b2ab872046eca5fdf3379006f7de\")\nmsg_id = {}\ndef updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]\n    except:\n        d = None\n    return d",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "msg_id",
        "kind": 5,
        "importPath": "utils.music",
        "description": "utils.music",
        "peekOfCode": "msg_id = {}\ndef updatemsgid(guild_id, data):\n    msg_id[guild_id] = data\ndef getmsgid(guild_id):\n    try:\n        d = msg_id[guild_id]\n    except:\n        d = None\n    return d\nclass BasicView(discord.ui.View):",
        "detail": "utils.music",
        "documentation": {}
    },
    {
        "label": "nsfw",
        "kind": 6,
        "importPath": "utils.nsfw",
        "description": "utils.nsfw",
        "peekOfCode": "class nsfw(commands.Cog):\n    \"\"\"Want some fun? These are best commands! :') :warning: 18+\"\"\"\n    def __init__(self, bot):\n        self.bot = bot\n    @property\n    def display_emoji(self) -> discord.PartialEmoji:\n        return discord.PartialEmoji(name=\"\\N{NO ONE UNDER EIGHTEEN SYMBOL}\")\n    @commands.command()\n    @commands.is_nsfw()\n    @commands.bot_has_permissions(embed_links=True)",
        "detail": "utils.nsfw",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "kind": 6,
        "importPath": "utils.paginator",
        "description": "utils.paginator",
        "peekOfCode": "class PaginatorView(discord.ui.View):\n    def __init__(\n        self,\n        embeds: List[discord.Embed],\n        bot: commands.AutoShardedBot,\n        author) -> None:\n        super().__init__(timeout=120)\n        self._embeds = embeds\n        self._queue = deque(embeds)\n        self._initial = embeds[0]",
        "detail": "utils.paginator",
        "documentation": {}
    },
    {
        "label": "create_rectangle",
        "kind": 2,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "def create_rectangle(x,y,a,b,**options):\n   if 'alpha' in options:\n      # Calculate the alpha transparency for every color(RGB)\n      alpha = int(options.pop('alpha') * 255)\n      # Use the fill variable to fill the shape with transparent color\n      fill = options.pop('fill')\n      fill = root.winfo_rgb(fill) + (alpha,)\n      image = Image.new('RGBA', (a-x, b-y), fill)\n      images.append(ImageTk.PhotoImage(image))\n      canvas.create_image(x, y, image=images[-1], anchor='nw')",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "response = requests.get(\"https://media.discordapp.net/attachments/1091162329720295557/1093941179172786196/3695752.png?width=947&height=533\")\n# Create the main window\nroot = tk.Tk()\nroot.geometry(\"800x600\")\nroot.title(\"My App\")\nimages = []\ndef create_rectangle(x,y,a,b,**options):\n   if 'alpha' in options:\n      # Calculate the alpha transparency for every color(RGB)\n      alpha = int(options.pop('alpha') * 255)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "root = tk.Tk()\nroot.geometry(\"800x600\")\nroot.title(\"My App\")\nimages = []\ndef create_rectangle(x,y,a,b,**options):\n   if 'alpha' in options:\n      # Calculate the alpha transparency for every color(RGB)\n      alpha = int(options.pop('alpha') * 255)\n      # Use the fill variable to fill the shape with transparent color\n      fill = options.pop('fill')",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "images = []\ndef create_rectangle(x,y,a,b,**options):\n   if 'alpha' in options:\n      # Calculate the alpha transparency for every color(RGB)\n      alpha = int(options.pop('alpha') * 255)\n      # Use the fill variable to fill the shape with transparent color\n      fill = options.pop('fill')\n      fill = root.winfo_rgb(fill) + (alpha,)\n      image = Image.new('RGBA', (a-x, b-y), fill)\n      images.append(ImageTk.PhotoImage(image))",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "bg_image",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "bg_image = Image.open(BytesIO(response.content))\nbg_photo = ImageTk.PhotoImage(bg_image)\ncanvas = tk.Canvas(root, width=800, height=600)\ncanvas.create_image(0, 0, image=bg_photo, anchor=tk.NW)\n# Add a circle on the top left and insert the logo inside it\n#circle = canvas.create_oval(100, 100, 140, 140, outline=\"#f11\",\n#            fill=\"#1f1\", width=3)\nlogo_res = requests.get(\"https://cdn.discordapp.com/avatars/978930369392951366/a_f604ee928488d76c1706bf4b751c2355.png\")\nimg = Image.open(BytesIO(logo_res.content)).convert(\"RGB\")\nimg = img.resize((100,100), Image.Resampling.LANCZOS)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "bg_photo",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "bg_photo = ImageTk.PhotoImage(bg_image)\ncanvas = tk.Canvas(root, width=800, height=600)\ncanvas.create_image(0, 0, image=bg_photo, anchor=tk.NW)\n# Add a circle on the top left and insert the logo inside it\n#circle = canvas.create_oval(100, 100, 140, 140, outline=\"#f11\",\n#            fill=\"#1f1\", width=3)\nlogo_res = requests.get(\"https://cdn.discordapp.com/avatars/978930369392951366/a_f604ee928488d76c1706bf4b751c2355.png\")\nimg = Image.open(BytesIO(logo_res.content)).convert(\"RGB\")\nimg = img.resize((100,100), Image.Resampling.LANCZOS)\narrImg = np.array(img) #convert to numpy array",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "canvas = tk.Canvas(root, width=800, height=600)\ncanvas.create_image(0, 0, image=bg_photo, anchor=tk.NW)\n# Add a circle on the top left and insert the logo inside it\n#circle = canvas.create_oval(100, 100, 140, 140, outline=\"#f11\",\n#            fill=\"#1f1\", width=3)\nlogo_res = requests.get(\"https://cdn.discordapp.com/avatars/978930369392951366/a_f604ee928488d76c1706bf4b751c2355.png\")\nimg = Image.open(BytesIO(logo_res.content)).convert(\"RGB\")\nimg = img.resize((100,100), Image.Resampling.LANCZOS)\narrImg = np.array(img) #convert to numpy array\nalph = Image.new('L', img.size, 0) #create a new image with alpha channel",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "#circle",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "#circle = canvas.create_oval(100, 100, 140, 140, outline=\"#f11\",\n#            fill=\"#1f1\", width=3)\nlogo_res = requests.get(\"https://cdn.discordapp.com/avatars/978930369392951366/a_f604ee928488d76c1706bf4b751c2355.png\")\nimg = Image.open(BytesIO(logo_res.content)).convert(\"RGB\")\nimg = img.resize((100,100), Image.Resampling.LANCZOS)\narrImg = np.array(img) #convert to numpy array\nalph = Image.new('L', img.size, 0) #create a new image with alpha channel\ndraw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "logo_res",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "logo_res = requests.get(\"https://cdn.discordapp.com/avatars/978930369392951366/a_f604ee928488d76c1706bf4b751c2355.png\")\nimg = Image.open(BytesIO(logo_res.content)).convert(\"RGB\")\nimg = img.resize((100,100), Image.Resampling.LANCZOS)\narrImg = np.array(img) #convert to numpy array\nalph = Image.new('L', img.size, 0) #create a new image with alpha channel\ndraw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "img = Image.open(BytesIO(logo_res.content)).convert(\"RGB\")\nimg = img.resize((100,100), Image.Resampling.LANCZOS)\narrImg = np.array(img) #convert to numpy array\nalph = Image.new('L', img.size, 0) #create a new image with alpha channel\ndraw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "img = img.resize((100,100), Image.Resampling.LANCZOS)\narrImg = np.array(img) #convert to numpy array\nalph = Image.new('L', img.size, 0) #create a new image with alpha channel\ndraw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "arrImg",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "arrImg = np.array(img) #convert to numpy array\nalph = Image.new('L', img.size, 0) #create a new image with alpha channel\ndraw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "alph",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "alph = Image.new('L', img.size, 0) #create a new image with alpha channel\ndraw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text\ncanvas.create_text(200, 100, text=\"Anay.#0314\", font=(\"Arial\", 16), anchor=tk.W)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "draw = ImageDraw.Draw(alph) #create a draw object\ndraw.pieslice([0, 0, img.size[0], img.size[1]], 0, 360, fill = 255) #create a circle\narAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text\ncanvas.create_text(200, 100, text=\"Anay.#0314\", font=(\"Arial\", 16), anchor=tk.W)\n# Add the Spotify, Soundcloud, and Deezer logos",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "arAlpha",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "arAlpha = np.array(alph) #conver to numpy array\narrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text\ncanvas.create_text(200, 100, text=\"Anay.#0314\", font=(\"Arial\", 16), anchor=tk.W)\n# Add the Spotify, Soundcloud, and Deezer logos\nspotify_res = requests.get(\"https://images-ext-1.discordapp.net/external/bA1me4gujZdwhhuxzyz4kP3W04Fp7R-9gEWMIeYm81E/https/cdn.discordapp.com/emojis/702156457218670698.png\")\nspotify_image = Image.open(BytesIO(spotify_res.content))",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "arrImg",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "arrImg = np.dstack((arrImg, arAlpha))\nlogo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text\ncanvas.create_text(200, 100, text=\"Anay.#0314\", font=(\"Arial\", 16), anchor=tk.W)\n# Add the Spotify, Soundcloud, and Deezer logos\nspotify_res = requests.get(\"https://images-ext-1.discordapp.net/external/bA1me4gujZdwhhuxzyz4kP3W04Fp7R-9gEWMIeYm81E/https/cdn.discordapp.com/emojis/702156457218670698.png\")\nspotify_image = Image.open(BytesIO(spotify_res.content))\nresized_image= spotify_image.resize((25,25), Image.Resampling.LANCZOS)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "logo_image",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "logo_image = Image.fromarray(arrImg)\nlogo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text\ncanvas.create_text(200, 100, text=\"Anay.#0314\", font=(\"Arial\", 16), anchor=tk.W)\n# Add the Spotify, Soundcloud, and Deezer logos\nspotify_res = requests.get(\"https://images-ext-1.discordapp.net/external/bA1me4gujZdwhhuxzyz4kP3W04Fp7R-9gEWMIeYm81E/https/cdn.discordapp.com/emojis/702156457218670698.png\")\nspotify_image = Image.open(BytesIO(spotify_res.content))\nresized_image= spotify_image.resize((25,25), Image.Resampling.LANCZOS)\nspotify_photo = ImageTk.PhotoImage(resized_image)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "logo_photo",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "logo_photo = ImageTk.PhotoImage(logo_image)\ncanvas.create_image(140, 125, image=logo_photo, anchor=tk.CENTER)\n# Add the \"Anay.#0314\" text\ncanvas.create_text(200, 100, text=\"Anay.#0314\", font=(\"Arial\", 16), anchor=tk.W)\n# Add the Spotify, Soundcloud, and Deezer logos\nspotify_res = requests.get(\"https://images-ext-1.discordapp.net/external/bA1me4gujZdwhhuxzyz4kP3W04Fp7R-9gEWMIeYm81E/https/cdn.discordapp.com/emojis/702156457218670698.png\")\nspotify_image = Image.open(BytesIO(spotify_res.content))\nresized_image= spotify_image.resize((25,25), Image.Resampling.LANCZOS)\nspotify_photo = ImageTk.PhotoImage(resized_image)\ncanvas.create_image(210, 150, image=spotify_photo, anchor=tk.CENTER)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "spotify_res",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "spotify_res = requests.get(\"https://images-ext-1.discordapp.net/external/bA1me4gujZdwhhuxzyz4kP3W04Fp7R-9gEWMIeYm81E/https/cdn.discordapp.com/emojis/702156457218670698.png\")\nspotify_image = Image.open(BytesIO(spotify_res.content))\nresized_image= spotify_image.resize((25,25), Image.Resampling.LANCZOS)\nspotify_photo = ImageTk.PhotoImage(resized_image)\ncanvas.create_image(210, 150, image=spotify_photo, anchor=tk.CENTER)\n# Add the left box with the \"TOP SERVER\" text and the format below it\nleft_box = create_rectangle(50, 200, 400, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(225, 210, text=\"TOP SERVER\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(225, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\n# Add the right box with the \"TOP FRIENDS\" text and the format below it",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "spotify_image",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "spotify_image = Image.open(BytesIO(spotify_res.content))\nresized_image= spotify_image.resize((25,25), Image.Resampling.LANCZOS)\nspotify_photo = ImageTk.PhotoImage(resized_image)\ncanvas.create_image(210, 150, image=spotify_photo, anchor=tk.CENTER)\n# Add the left box with the \"TOP SERVER\" text and the format below it\nleft_box = create_rectangle(50, 200, 400, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(225, 210, text=\"TOP SERVER\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(225, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\n# Add the right box with the \"TOP FRIENDS\" text and the format below it\nright_box = create_rectangle(420, 200, 770, 300, fill=\"black\", outline=\"\", alpha=.5)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "spotify_photo",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "spotify_photo = ImageTk.PhotoImage(resized_image)\ncanvas.create_image(210, 150, image=spotify_photo, anchor=tk.CENTER)\n# Add the left box with the \"TOP SERVER\" text and the format below it\nleft_box = create_rectangle(50, 200, 400, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(225, 210, text=\"TOP SERVER\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(225, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\n# Add the right box with the \"TOP FRIENDS\" text and the format below it\nright_box = create_rectangle(420, 200, 770, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(595, 210, text=\"TOP FRIENDS\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(595, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "left_box",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "left_box = create_rectangle(50, 200, 400, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(225, 210, text=\"TOP SERVER\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(225, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\n# Add the right box with the \"TOP FRIENDS\" text and the format below it\nright_box = create_rectangle(420, 200, 770, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(595, 210, text=\"TOP FRIENDS\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(595, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\n# Add the bottom box with the \"TOP TRACKS\" text and the format below it\nbottom_box = create_rectangle(50, 320, 770, 500, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(410, 330, text=\"TOP TRACKS\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "right_box",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "right_box = create_rectangle(420, 200, 770, 300, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(595, 210, text=\"TOP FRIENDS\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(595, 230, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\n# Add the bottom box with the \"TOP TRACKS\" text and the format below it\nbottom_box = create_rectangle(50, 320, 770, 500, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(410, 330, text=\"TOP TRACKS\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(410, 350, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\ncanvas.pack()\nroot.mainloop()",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "bottom_box",
        "kind": 5,
        "importPath": "utils.slashremove",
        "description": "utils.slashremove",
        "peekOfCode": "bottom_box = create_rectangle(50, 320, 770, 500, fill=\"black\", outline=\"\", alpha=.5)\ncanvas.create_text(410, 330, text=\"TOP TRACKS\", font=(\"Arial\", 16), fill=\"white\", anchor=tk.CENTER)\ncanvas.create_text(410, 350, text=\"1. 1h 56m - Special Ones <3\", font=(\"Arial\", 12), fill=\"white\", anchor=tk.CENTER)\ncanvas.pack()\nroot.mainloop()",
        "detail": "utils.slashremove",
        "documentation": {}
    },
    {
        "label": "roledropdownmenu",
        "kind": 6,
        "importPath": "utils.stickyroles",
        "description": "utils.stickyroles",
        "peekOfCode": "class roledropdownmenu(discord.ui.RoleSelect):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(placeholder=\"Select the role\",\n            min_values=1,\n            max_values=25,\n        )\n        self.ctx = ctx\n    async def callback(self, interaction: discord.Interaction):\n        await interaction.response.defer(ephemeral=False, thinking=False)\n        ls = []",
        "detail": "utils.stickyroles",
        "documentation": {}
    },
    {
        "label": "rolemenuview",
        "kind": 6,
        "importPath": "utils.stickyroles",
        "description": "utils.stickyroles",
        "peekOfCode": "class rolemenuview(discord.ui.View):\n    def __init__(self, ctx: commands.Context):\n        super().__init__(timeout=None)\n        self.ctx = ctx\n        self.add_item(roledropdownmenu(self.ctx))\n    async def interaction_check(self, interaction: discord.Interaction):\n        if interaction.user.id != self.ctx.author.id and interaction.user.id not in  [978930369392951366, 979353019235840000]:\n            await interaction.response.send_message(f\"Um, Looks like you are not the author of the command...\", ephemeral=True)\n            return False\n        return True",
        "detail": "utils.stickyroles",
        "documentation": {}
    },
    {
        "label": "stickyroles",
        "kind": 6,
        "importPath": "utils.stickyroles",
        "description": "utils.stickyroles",
        "peekOfCode": "class stickyroles(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.color = 0xc283fe\n    @commands.group(invoke_without_command=True, name=\"stickyroles\", aliases=['stickyrole', 'sticky'], description=\"Show's the help menu for sticky roles\")\n    async def stickyroles(self, ctx: commands.Context):\n        prefix = ctx.prefix\n        if prefix == f\"<@{self.bot.user.id}> \":\n            prefix = f\"@{str(self.bot.user)} \"\n        anay = discord.utils.get(self.bot.users, id=978930369392951366)",
        "detail": "utils.stickyroles",
        "documentation": {}
    },
    {
        "label": "xdd",
        "kind": 5,
        "importPath": "utils.stickyroles",
        "description": "utils.stickyroles",
        "peekOfCode": "xdd = {}\nasync def getrole(guild_id):\n    if guild_id not in xdd:\n        return 0\n    else:\n        return xdd[guild_id]\nasync def updaterole(guild_id, role_id):\n    xdd[guild_id] = role_id\n    return True\nasync def delrole(guild_id):",
        "detail": "utils.stickyroles",
        "documentation": {}
    },
    {
        "label": "dr1",
        "kind": 5,
        "importPath": "basic_help",
        "description": "basic_help",
        "peekOfCode": "dr1 = {'Antinuke': ['<:shieldRed:1154448649967894569>', 6], 'Extra': ['<:timer:1154448241962778724>', 7], 'General': ['<:cc:1154674197298151454>', 8], 'Giveaway': ['<:tada2:1154448776421974096>', 9], 'Ignore': ['<:icons_ping:1154448779240554545>', 10], 'Invc': ['<:voice_channel:1154448783233523742>', 11], 'Logging': ['<:logging:1154448836933197824>', 12], 'Moderation': ['<:tools:1154448773695684639>', 13], 'Raidmode': ['<:icons_ban:1154448772026351708>', 14], 'Selfroles': ['<:create_role:1154448637112357024>', 15], 'Ticket': ['<:tix:1154675417786093608>', 16], 'Voice': ['<:JazzlyVolume:1154448640157429860>', 17], 'Welcome': ['<:welcome:1154448643772928030>', 18], 'Premium': ['<:gt_premium:1156882571175665704>', 19] }\ncogs = ['antinuke', 'extra', 'general', 'giveaway', 'ignore', 'invc', 'logging', 'moderation', 'raidmode', 'selfroles', 'ticket', 'voice', 'welcome', 'premium', 'fun']\ndr = {'Antinuke': ['<:shieldRed:1154448649967894569>', 1], 'Extra': ['<:timer:1154448241962778724>', 2], 'General': ['<:cc:1154674197298151454>', 3], 'Giveaway': ['<:tada2:1154448776421974096>', 4], 'Ignore': ['<:icons_ping:1154448779240554545>', 5], 'Invc': ['<:voice_channel:1154448783233523742>', 6], 'Logging': ['<:logging:1154448836933197824>', 7], 'Moderation': ['<:tools:1154448773695684639>', 8], 'Raidmode': ['<:icons_ban:1154448772026351708>', 9], 'Selfroles': ['<:create_role:1154448637112357024>', 10], 'Ticket': ['<:tix:1154675417786093608>', 11], 'Voice': ['<:JazzlyVolume:1154448640157429860>', 12], 'Welcome': ['<:welcome:1154448643772928030>', 13], 'Premium': ['<:gt_premium:1156882571175665704>', 14],'Fun': ['<:text:1158316318488010935>', 15] }",
        "detail": "basic_help",
        "documentation": {}
    },
    {
        "label": "cogs",
        "kind": 5,
        "importPath": "basic_help",
        "description": "basic_help",
        "peekOfCode": "cogs = ['antinuke', 'extra', 'general', 'giveaway', 'ignore', 'invc', 'logging', 'moderation', 'raidmode', 'selfroles', 'ticket', 'voice', 'welcome', 'premium', 'fun']\ndr = {'Antinuke': ['<:shieldRed:1154448649967894569>', 1], 'Extra': ['<:timer:1154448241962778724>', 2], 'General': ['<:cc:1154674197298151454>', 3], 'Giveaway': ['<:tada2:1154448776421974096>', 4], 'Ignore': ['<:icons_ping:1154448779240554545>', 5], 'Invc': ['<:voice_channel:1154448783233523742>', 6], 'Logging': ['<:logging:1154448836933197824>', 7], 'Moderation': ['<:tools:1154448773695684639>', 8], 'Raidmode': ['<:icons_ban:1154448772026351708>', 9], 'Selfroles': ['<:create_role:1154448637112357024>', 10], 'Ticket': ['<:tix:1154675417786093608>', 11], 'Voice': ['<:JazzlyVolume:1154448640157429860>', 12], 'Welcome': ['<:welcome:1154448643772928030>', 13], 'Premium': ['<:gt_premium:1156882571175665704>', 14],'Fun': ['<:text:1158316318488010935>', 15] }",
        "detail": "basic_help",
        "documentation": {}
    },
    {
        "label": "dr",
        "kind": 5,
        "importPath": "basic_help",
        "description": "basic_help",
        "peekOfCode": "dr = {'Antinuke': ['<:shieldRed:1154448649967894569>', 1], 'Extra': ['<:timer:1154448241962778724>', 2], 'General': ['<:cc:1154674197298151454>', 3], 'Giveaway': ['<:tada2:1154448776421974096>', 4], 'Ignore': ['<:icons_ping:1154448779240554545>', 5], 'Invc': ['<:voice_channel:1154448783233523742>', 6], 'Logging': ['<:logging:1154448836933197824>', 7], 'Moderation': ['<:tools:1154448773695684639>', 8], 'Raidmode': ['<:icons_ban:1154448772026351708>', 9], 'Selfroles': ['<:create_role:1154448637112357024>', 10], 'Ticket': ['<:tix:1154675417786093608>', 11], 'Voice': ['<:JazzlyVolume:1154448640157429860>', 12], 'Welcome': ['<:welcome:1154448643772928030>', 13], 'Premium': ['<:gt_premium:1156882571175665704>', 14],'Fun': ['<:text:1158316318488010935>', 15] }",
        "detail": "basic_help",
        "documentation": {}
    },
    {
        "label": "embedMenu",
        "kind": 6,
        "importPath": "embed",
        "description": "embed",
        "peekOfCode": "class embedMenu(discord.ui.Select):\n    def __init__(self, bot, ctx: commands.Context, id):\n        options = [\n            discord.SelectOption(label='Author', value=\"author\"),\n            discord.SelectOption(label='Author icon url', value=\"authoriurl\"),\n            discord.SelectOption(label='Author url', value=\"authorurl\"),\n            discord.SelectOption(label='Title', value=\"title\"),\n            discord.SelectOption(label='Description', value=\"des\"),\n            discord.SelectOption(label='Add Field', value=\"field\"),\n            discord.SelectOption(label='Thumbnail', value=\"thumb\"),",
        "detail": "embed",
        "documentation": {}
    },
    {
        "label": "xdd",
        "kind": 5,
        "importPath": "embed",
        "description": "embed",
        "peekOfCode": "xdd = {}\nmemc = {}\nasync def memcount(guild, id, dic: dict):\n    if id not in memc:\n        memc[id] = {}\n        ls = {}\n    else:\n        ls = memc[id][\"new\"]\n    memc[id][\"old\"] = dic.copy()\n    ordinal = lambda n: \"%d%s\" % (n,\"tsnrhtdd\"[(n//10%10!=1)*(n%10<4)*n%10::4])",
        "detail": "embed",
        "documentation": {}
    },
    {
        "label": "memc",
        "kind": 5,
        "importPath": "embed",
        "description": "embed",
        "peekOfCode": "memc = {}\nasync def memcount(guild, id, dic: dict):\n    if id not in memc:\n        memc[id] = {}\n        ls = {}\n    else:\n        ls = memc[id][\"new\"]\n    memc[id][\"old\"] = dic.copy()\n    ordinal = lambda n: \"%d%s\" % (n,\"tsnrhtdd\"[(n//10%10!=1)*(n%10<4)*n%10::4])\n    for i in dic:",
        "detail": "embed",
        "documentation": {}
    },
    {
        "label": "helpdrop",
        "kind": 6,
        "importPath": "hpag",
        "description": "hpag",
        "peekOfCode": "class helpdrop(discord.ui.Select):\n    def __init__(self, view: discord.ui.View, embed_list: list, dr: dict, i: int, ctx):\n        self.embed_list = embed_list\n        self.v = view\n        self.id = i\n        options = []\n        options.append(discord.SelectOption(label=f'Home', value=0, description=f'Return to the home page', emoji=f'<:gt_home:1154688066884206674>'))\n        for i in dr:\n            x = dr[i]\n            options.append(discord.SelectOption(label=f'{i} Commands', value=x[1], description=f'Shows you {i} commands', emoji=f'{x[0]}'))",
        "detail": "hpag",
        "documentation": {}
    },
    {
        "label": "HPaginationView",
        "kind": 6,
        "importPath": "hpag",
        "description": "hpag",
        "peekOfCode": "class HPaginationView(discord.ui.View):\n    def __init__(self, embed_list: list, dr: dict, i: int, ctx, links: list=None):\n        super().__init__(timeout=90)\n        self.add_item(helpdrop(self, embed_list, dr, i, ctx))\n        self.embed_list = embed_list\n        self.id = i\n        self.ctx = ctx\n        self.links = links\n        self.view = None\n        self.message = None",
        "detail": "hpag",
        "documentation": {}
    },
    {
        "label": "change_page",
        "kind": 2,
        "importPath": "hpag",
        "description": "hpag",
        "peekOfCode": "def change_page(id, c: int):\n    query = \"SELECT * FROM  'help' WHERE main = ?\"\n    val = (id,)\n    with sqlite3.connect('./database.sqlite3') as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        log_db = cursor.fetchone()\n    sql = (f\"UPDATE 'help' SET 'no' = ? WHERE main = ?\")\n    val = (c, id)",
        "detail": "hpag",
        "documentation": {}
    },
    {
        "label": "get_page",
        "kind": 2,
        "importPath": "hpag",
        "description": "hpag",
        "peekOfCode": "def get_page(id):\n    query = \"SELECT * FROM  'help' WHERE main = ?\"\n    val = (id,)\n    with sqlite3.connect('./database.sqlite3') as db:\n        db.row_factory = sqlite3.Row\n        cursor = db.cursor()\n        cursor.execute(query, val)\n        log_db = cursor.fetchone()\n    return log_db['no']\nclass helpdrop(discord.ui.Select):",
        "detail": "hpag",
        "documentation": {}
    },
    {
        "label": "Auth",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Auth(commands.Context): \n    def __init__(self, **kwargs): \n        super().__init__(**kwargs)\n        self.color = 0x6d827d\n        self.yes = \"<:greenTick:1230421239634595860>\"\n        self.no = \"<:redTick:1230421267514003457>\"\n        self.warning = \"<:rival_warning:1230421852770271272>\"\n        self.left = \"◀️\"\n        self.right = \"▶️\"\nclass Context(commands.Context): ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Context(commands.Context): \n def __init__(self, **kwargs): \n  super().__init__(**kwargs) \n def find_role(self, name: str): \n   for role in self.guild.roles:\n    if role.name == \"@everyone\": continue  \n    if name.lower() in role.name.lower(): return role \n   return None \n async def send_success(self, message: str) -> discord.Message:  \n  return await self.reply(embed=discord.Embed(color=self.bot.color, description=f\"{self.bot.yes} {self.author.mention}: {message}\") )",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Bot(commands.AutoShardedBot):\n    def __init__(self, get_pre, intents, pg_conn) -> None:\n        super().__init__(command_prefix=get_pre, case_insensitive=True, intents=intents, shard_count=shard_count, allowed_mentions=discord.AllowedMentions(roles=False, users=True, everyone=False))\n        self.pg_conn = pg_conn\n        self.db = None\n    async def setup_hook(self) -> None:\n        for filename in os.listdir('./cogs'):\n            if filename.endswith('.py'):\n                await self.load_extension(\"cogs.\" + filename[:-3])\n        await self.load_extension(\"jishaku\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "os.environ[\"JISHAKU_NO_UNDERSCORE\"]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "os.environ[\"JISHAKU_NO_UNDERSCORE\"] = \"True\"\nimport sqlite3\nimport datetime\nimport aiosqlite\nimport asyncpg\nimport re\nfrom ast import literal_eval\nfrom typing import List \nimport botinfo\nfrom cogs.premium import check_upgraded",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "botinfo.starttime",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "botinfo.starttime = datetime.datetime.utcnow()\ncheck = False\nclass Auth(commands.Context): \n    def __init__(self, **kwargs): \n        super().__init__(**kwargs)\n        self.color = 0x6d827d\n        self.yes = \"<:greenTick:1230421239634595860>\"\n        self.no = \"<:redTick:1230421267514003457>\"\n        self.warning = \"<:rival_warning:1230421852770271272>\"\n        self.left = \"◀️\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "check = False\nclass Auth(commands.Context): \n    def __init__(self, **kwargs): \n        super().__init__(**kwargs)\n        self.color = 0x6d827d\n        self.yes = \"<:greenTick:1230421239634595860>\"\n        self.no = \"<:redTick:1230421267514003457>\"\n        self.warning = \"<:rival_warning:1230421852770271272>\"\n        self.left = \"◀️\"\n        self.right = \"▶️\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "credentials",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "credentials = {\"user\": \"\", \"password\": \"\", \"database\": \"postgres\", \"host\": \"\"}\nshard_count = 1\nintents = discord.Intents.all()\nintents.message_content = True\nintents.presences = False\nclass Bot(commands.AutoShardedBot):\n    def __init__(self, get_pre, intents, pg_conn) -> None:\n        super().__init__(command_prefix=get_pre, case_insensitive=True, intents=intents, shard_count=shard_count, allowed_mentions=discord.AllowedMentions(roles=False, users=True, everyone=False))\n        self.pg_conn = pg_conn\n        self.db = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "shard_count",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "shard_count = 1\nintents = discord.Intents.all()\nintents.message_content = True\nintents.presences = False\nclass Bot(commands.AutoShardedBot):\n    def __init__(self, get_pre, intents, pg_conn) -> None:\n        super().__init__(command_prefix=get_pre, case_insensitive=True, intents=intents, shard_count=shard_count, allowed_mentions=discord.AllowedMentions(roles=False, users=True, everyone=False))\n        self.pg_conn = pg_conn\n        self.db = None\n    async def setup_hook(self) -> None:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents = discord.Intents.all()\nintents.message_content = True\nintents.presences = False\nclass Bot(commands.AutoShardedBot):\n    def __init__(self, get_pre, intents, pg_conn) -> None:\n        super().__init__(command_prefix=get_pre, case_insensitive=True, intents=intents, shard_count=shard_count, allowed_mentions=discord.AllowedMentions(roles=False, users=True, everyone=False))\n        self.pg_conn = pg_conn\n        self.db = None\n    async def setup_hook(self) -> None:\n        for filename in os.listdir('./cogs'):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents.message_content = True\nintents.presences = False\nclass Bot(commands.AutoShardedBot):\n    def __init__(self, get_pre, intents, pg_conn) -> None:\n        super().__init__(command_prefix=get_pre, case_insensitive=True, intents=intents, shard_count=shard_count, allowed_mentions=discord.AllowedMentions(roles=False, users=True, everyone=False))\n        self.pg_conn = pg_conn\n        self.db = None\n    async def setup_hook(self) -> None:\n        for filename in os.listdir('./cogs'):\n            if filename.endswith('.py'):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents.presences",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents.presences = False\nclass Bot(commands.AutoShardedBot):\n    def __init__(self, get_pre, intents, pg_conn) -> None:\n        super().__init__(command_prefix=get_pre, case_insensitive=True, intents=intents, shard_count=shard_count, allowed_mentions=discord.AllowedMentions(roles=False, users=True, everyone=False))\n        self.pg_conn = pg_conn\n        self.db = None\n    async def setup_hook(self) -> None:\n        for filename in os.listdir('./cogs'):\n            if filename.endswith('.py'):\n                await self.load_extension(\"cogs.\" + filename[:-3])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "shard_count",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "shard_count = 1\nintents = discord.Intents.all()\nintents.message_content = True\nintents.presences = False\npg_conn = None\nbot = Bot(get_pre, intents, pg_conn)\nownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents = discord.Intents.all()\nintents.message_content = True\nintents.presences = False\npg_conn = None\nbot = Bot(get_pre, intents, pg_conn)\nownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents.message_content = True\nintents.presences = False\npg_conn = None\nbot = Bot(get_pre, intents, pg_conn)\nownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    check = True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents.presences",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents.presences = False\npg_conn = None\nbot = Bot(get_pre, intents, pg_conn)\nownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    check = True\n    #bot.loop.create_task(node_connect())",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pg_conn",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "pg_conn = None\nbot = Bot(get_pre, intents, pg_conn)\nownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    check = True\n    #bot.loop.create_task(node_connect())\n    bot.topggpy = topgg.client.DBLClient(bot=bot, token=botinfo.dbltoken, autopost=True, post_shard_count=False, autopost_interval=900)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = Bot(get_pre, intents, pg_conn)\nownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    check = True\n    #bot.loop.create_task(node_connect())\n    bot.topggpy = topgg.client.DBLClient(bot=bot, token=botinfo.dbltoken, autopost=True, post_shard_count=False, autopost_interval=900)\n@bot.event",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ownerids",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ownerids = botinfo.botowner\nbot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    check = True\n    #bot.loop.create_task(node_connect())\n    bot.topggpy = topgg.client.DBLClient(bot=bot, token=botinfo.dbltoken, autopost=True, post_shard_count=False, autopost_interval=900)\n@bot.event\nasync def on_autopost_success():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot.owner_ids",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot.owner_ids = ownerids\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    check = True\n    #bot.loop.create_task(node_connect())\n    bot.topggpy = topgg.client.DBLClient(bot=bot, token=botinfo.dbltoken, autopost=True, post_shard_count=False, autopost_interval=900)\n@bot.event\nasync def on_autopost_success():\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "github_token",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "github_token = 'Better Luck Next Time'\n@bot.command(name='gitpull', help='Pull GitHub updates')\nasync def gpull(ctx, repository: str):\n    try:\n        result = subprocess.run(['git', 'pull'], cwd=f'/root/{repository}',\n                                env={'GIT_ASKPASS': 'echo', 'GITHUB_TOKEN': github_token},\n                                capture_output=True, text=True, shell=True)\n        if result.returncode == 0:\n            await ctx.send(f'Successfully pulled updates for {repository}. Output:\\n```\\n{result.stdout}\\n```')\n        else:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Page",
        "kind": 6,
        "importPath": "paginators",
        "description": "paginators",
        "peekOfCode": "class Page(NamedTuple):\n    index: int\n    content: str\nclass Pages:\n    def __init__(self, pages: list):\n        self.pages = pages\n        self.cur_page = 1\n    @property\n    def current_page(self) -> Page:\n        return Page(self.cur_page, self.pages[self.cur_page - 1])",
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "Pages",
        "kind": 6,
        "importPath": "paginators",
        "description": "paginators",
        "peekOfCode": "class Pages:\n    def __init__(self, pages: list):\n        self.pages = pages\n        self.cur_page = 1\n    @property\n    def current_page(self) -> Page:\n        return Page(self.cur_page, self.pages[self.cur_page - 1])\n    @property\n    def next_page(self) -> Optional[Page]:\n        if self.cur_page == self.total:",
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "ParrotPaginator",
        "kind": 6,
        "importPath": "paginators",
        "description": "paginators",
        "peekOfCode": "class ParrotPaginator:\n    def __init__(\n        self,\n        ctx,\n        *,\n        per_page=10,\n        timeout=60.0,\n        title=None,\n        show_page_count=True,\n        embed_url: str = None,",
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginatorView",
        "kind": 6,
        "importPath": "paginators",
        "description": "paginators",
        "peekOfCode": "class PaginatorView(discord.ui.View):\n    def __init__(\n        self,\n        ctx,\n        pages: Pages,\n        embed,\n        timeout,\n        show_page_count,\n        *,\n        check_other_ids: list = None,",
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "PaginationView",
        "kind": 6,
        "importPath": "paginators",
        "description": "paginators",
        "peekOfCode": "class PaginationView(discord.ui.View):\n    current = 0\n    def __init__(self, embed_list: list, ctx, links: list=None):\n        super().__init__(timeout=90)\n        self.embed_list = embed_list\n        self.ctx = ctx\n        self.links = links\n        self.view = None\n        self.message = None\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:",
        "detail": "paginators",
        "documentation": {}
    },
    {
        "label": "get_chunks",
        "kind": 2,
        "importPath": "paginators",
        "description": "paginators",
        "peekOfCode": "def get_chunks(iterable, size):\n    it = iter(iterable)\n    return iter(lambda: tuple(islice(it, size)), ())\nclass Page(NamedTuple):\n    index: int\n    content: str\nclass Pages:\n    def __init__(self, pages: list):\n        self.pages = pages\n        self.cur_page = 1",
        "detail": "paginators",
        "documentation": {}
    }
]